{
  "address": "0x4c5859f0F772848b2D91F1D83E2Fe57935348029",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "joeRouterV2Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nodeControllerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newLiquidityWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldLiquidityWallet",
          "type": "address"
        }
      ],
      "name": "LiquidityWalletUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "SetAutomatedMarketMakerPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensIntoLiqudity",
          "type": "uint256"
        }
      ],
      "name": "SwapAndLiquify",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        }
      ],
      "name": "UpdateUniswapV2Router",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "automatedMarketMakerPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "blacklistMalicious",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "boostReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashoutPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "cashoutReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "cashoutSpecificReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newMode",
          "type": "bool"
        }
      ],
      "name": "changeAutoDistri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "changeClaimTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newGasDistri",
          "type": "uint256"
        }
      ],
      "name": "changeGasDistri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newNodePrice",
          "type": "uint256"
        }
      ],
      "name": "changeNodePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeRewardPerNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newVal",
          "type": "bool"
        }
      ],
      "name": "changeSwapLiquify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "compound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "createNodeWithTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expenseFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expensePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAutoDistri",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistriCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasDistri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNodeNumberOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesCreatime",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesLastClaims",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNodesRewards",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRewardAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardPerNode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCreatedNodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStakedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nodeRewardManager",
      "outputs": [
        {
          "internalType": "contract NodeRewardController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publiDistriRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "oldName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "renameNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setAutomatedMarketMakerPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setExcludedFromFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nodeManagement",
          "type": "address"
        }
      ],
      "name": "setNodeManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTokensAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "nodeName",
          "type": "string"
        }
      ],
      "name": "transferNode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IJoeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateCashoutWall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateExpenseWall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateFuturFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateLiquiditFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateMarketingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateMarketingWall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateRewardsFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wall",
          "type": "address"
        }
      ],
      "name": "updateRewardsWall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateRwSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateSellFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVal",
          "type": "uint256"
        }
      ],
      "name": "updateSwapTokensAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7eacbb7da48d1d32bc36c9ec222a67b255e749664b1b92ca884481df5bca9911",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4c5859f0F772848b2D91F1D83E2Fe57935348029",
    "transactionIndex": 0,
    "gasUsed": "6331759",
    "logsBloom": "0x
    "blockHash": "0xe2b007dc70cfb9b20546ea9f3811f9bb0a704a697494e991eff24a156450ab84",
    "transactionHash": "0x7eacbb7da48d1d32bc36c9ec222a67b255e749664b1b92ca884481df5bca9911",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12908002,
        "transactionHash": "0x7eacbb7da48d1d32bc36c9ec222a67b255e749664b1b92ca884481df5bca9911",
        "address": "0x4c5859f0F772848b2D91F1D83E2Fe57935348029",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe2b007dc70cfb9b20546ea9f3811f9bb0a704a697494e991eff24a156450ab84"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12908002,
        "transactionHash": "0x7eacbb7da48d1d32bc36c9ec222a67b255e749664b1b92ca884481df5bca9911",
        "address": "0x4c5859f0F772848b2D91F1D83E2Fe57935348029",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc"
        ],
        "data": "0x000000000000000000000000000000000000000c9f2c9cd04674edea40000000",
        "logIndex": 1,
        "blockHash": "0xe2b007dc70cfb9b20546ea9f3811f9bb0a704a697494e991eff24a156450ab84"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12908002,
        "transactionHash": "0x7eacbb7da48d1d32bc36c9ec222a67b255e749664b1b92ca884481df5bca9911",
        "address": "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10",
        "topics": [
          "0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9",
          "0x0000000000000000000000004c5859f0f772848b2d91f1d83e2fe57935348029",
          "0x000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c7"
        ],
        "data": "0x000000000000000000000000f3331e7a2c4862c4fbdba0743c51ba4c525eb3fd0000000000000000000000000000000000000000000000000000000000003ae2",
        "logIndex": 2,
        "blockHash": "0xe2b007dc70cfb9b20546ea9f3811f9bb0a704a697494e991eff24a156450ab84"
      }
    ],
    "blockNumber": 12908002,
    "cumulativeGasUsed": "6331759",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
      "0x90F79bf6EB2c4f870365E785982E1f101E93b906",
      "0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65",
      "0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc",
      "0x976EA74026E726554dB657fA54763abd0C3a0aa9"
    ],
    "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
    "0x809d550fca64d94Bd9F66E60752A544199cfAC3D"
  ],
  "numDeployments": 1,
  "solcInputHash": "82d81100ba75a9be14065cf941aec283",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"joeRouterV2Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeControllerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistMalicious\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"boostReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"cashoutReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cashoutSpecificReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newMode\",\"type\":\"bool\"}],\"name\":\"changeAutoDistri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"changeClaimTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGasDistri\",\"type\":\"uint256\"}],\"name\":\"changeGasDistri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNodePrice\",\"type\":\"uint256\"}],\"name\":\"changeNodePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeRewardPerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeSwapLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createNodeWithTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expenseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expensePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoDistri\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistriCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasDistri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNodeNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesCreatime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesLastClaims\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesRewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPerNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCreatedNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeRewardManager\",\"outputs\":[{\"internalType\":\"contract NodeRewardController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publiDistriRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"oldName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"renameNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeManagement\",\"type\":\"address\"}],\"name\":\"setNodeManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nodeName\",\"type\":\"string\"}],\"name\":\"transferNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IJoeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateCashoutWall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateExpenseWall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateFuturFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateLiquiditFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateMarketingWall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateRewardsWall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateRwSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EasyToken.sol\":\"EasyToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/EasyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./NodeRewardController.sol\\\";\\r\\nimport \\\"./interfaces/IJoeRouter02.sol\\\";\\r\\nimport \\\"./interfaces/IJoeFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeMathUint\\r\\n * @dev Math operations with safety TKNcks that revert on error\\r\\n */\\r\\nlibrary SafeMathUint {\\r\\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n        int256 b = int256(a);\\r\\n        require(b >= 0, \\\"toInt256Safe: B LESS THAN ZERO\\\");\\r\\n        return b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SafeMathInt\\r\\n * @dev Math operations for int256 with overflow safety TKNcks.\\r\\n */\\r\\nlibrary SafeMathInt {\\r\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\r\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a * b;\\r\\n\\r\\n        // Detect overflow when multiplying MIN_INT256 with -1\\r\\n        require(\\r\\n            c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256),\\r\\n            \\\"mul: A B C combi values invalid with MIN_INT256\\\"\\r\\n        );\\r\\n        require((b == 0) || (c / b == a), \\\"mul: A B C combi values invalid\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division of two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Prevent overflow when dividing MIN_INT256 by -1\\r\\n        require(b != -1 || a != MIN_INT256, \\\"div: b == 1 OR A == MIN_INT256\\\");\\r\\n\\r\\n        // Solidity already throws when dividing by 0.\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require(\\r\\n            (b >= 0 && c <= a) || (b < 0 && c > a),\\r\\n            \\\"sub: A B C combi values invalid\\\"\\r\\n        );\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require(\\r\\n            (b >= 0 && c >= a) || (b < 0 && c < a),\\r\\n            \\\"add: A B C combi values invalid\\\"\\r\\n        );\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts to absolute value, and fails on overflow.\\r\\n     */\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != MIN_INT256, \\\"abs: A EQUAL MIN INT256\\\");\\r\\n        return a < 0 ? -a : a;\\r\\n    }\\r\\n\\r\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n        require(a >= 0, \\\"toUint256Safe: A LESS THAN ZERO\\\");\\r\\n        return uint256(a);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract EasyToken is ERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    NodeRewardController public nodeRewardManager;\\r\\n\\r\\n    IJoeRouter02 public uniswapV2Router;\\r\\n\\r\\n    address public uniswapV2Pair;\\r\\n    address public expensePool;\\r\\n    address public distributionPool;\\r\\n\\r\\n    address public marketingPool;\\r\\n    address public treasuryPool;\\r\\n    address public cashoutPool;\\r\\n\\r\\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    uint256 public rewardsFee;\\r\\n    uint256 public liquidityPoolFee;\\r\\n    uint256 public expenseFee;\\r\\n    uint256 public totalFees;\\r\\n\\r\\n    uint256 public sellFee;\\r\\n\\r\\n    uint256 public marketingFee;\\r\\n\\r\\n    uint256 private rwSwap;\\r\\n    bool private swapping = false;\\r\\n    bool private swapLiquify = true;\\r\\n    uint256 public swapTokensAmount = 300 * 10 ** 18; // 300 $EASY\\r\\n\\r\\n    uint256 TOTAL_SUPPLY = 10 ** 12 * (10 ** 18); // 1T $EASY\\r\\n\\r\\n    mapping(address => bool) public _isBlacklisted;\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n    mapping (address => bool) private _isExcludedFromFee;\\r\\n\\r\\n    event UpdateUniswapV2Router(\\r\\n        address indexed newAddress,\\r\\n        address indexed oldAddress\\r\\n    );\\r\\n\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    event LiquidityWalletUpdated(\\r\\n        address indexed newLiquidityWallet,\\r\\n        address indexed oldLiquidityWallet\\r\\n    );\\r\\n\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address[] memory addresses,\\r\\n        address joeRouterV2Address,\\r\\n        address nodeControllerAddress\\r\\n    ) ERC20(\\\"EasyToken\\\", \\\"EASY\\\") {\\r\\n\\r\\n        require(addresses.length == 5, \\\"Count of Addresses must be 5\\\");\\r\\n\\r\\n        nodeRewardManager = NodeRewardController(nodeControllerAddress);\\r\\n\\r\\n        treasuryPool = addresses[0];\\r\\n        distributionPool = addresses[1];\\r\\n        marketingPool = addresses[2];\\r\\n        expensePool = addresses[3];\\r\\n        cashoutPool = addresses[4];\\r\\n\\r\\n        for (uint256 i = 0; i < 5; i++) {\\r\\n            _isExcludedFromFee[addresses[i]] = true;\\r\\n        }\\r\\n\\r\\n        require(expensePool != address(0) && distributionPool != address(0), \\\"FUTUR & REWARD ADDRESS CANNOT BE ZERO\\\");\\r\\n        \\r\\n        rewardsFee = 60;\\r\\n        liquidityPoolFee = 30;\\r\\n        marketingFee = 5;\\r\\n        expenseFee = 5;\\r\\n        rwSwap = 30;\\r\\n\\r\\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\\r\\n\\r\\n        _mint(treasuryPool, TOTAL_SUPPLY);\\r\\n\\r\\n        uniswapV2Router = IJoeRouter02(joeRouterV2Address);\\r\\n\\r\\n        uniswapV2Pair = IJoeFactory(uniswapV2Router.factory())\\r\\n        .createPair(address(this), uniswapV2Router.WAVAX());\\r\\n        \\r\\n    }\\r\\n\\r\\n    function setNodeManagement(address nodeManagement) external onlyOwner {\\r\\n        nodeRewardManager = NodeRewardController(nodeManagement);\\r\\n    }\\r\\n\\r\\n    function updateSwapTokensAmount(uint256 newVal) external onlyOwner {\\r\\n        swapTokensAmount = newVal;\\r\\n    }\\r\\n\\r\\n    function updateExpenseWall(address payable wall) external onlyOwner {\\r\\n        expensePool = wall;\\r\\n    }\\r\\n\\r\\n    function updateRewardsWall(address payable wall) external onlyOwner {\\r\\n        distributionPool = wall;\\r\\n    }\\r\\n\\r\\n    function updateMarketingWall(address payable wall) external onlyOwner {\\r\\n        marketingPool = wall;\\r\\n    }\\r\\n\\r\\n    function updateCashoutWall(address payable wall) external onlyOwner {\\r\\n        cashoutPool = wall;\\r\\n    }\\r\\n\\r\\n    function updateRewardsFee(uint256 value) external onlyOwner {\\r\\n        rewardsFee = value;\\r\\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\\r\\n    }\\r\\n\\r\\n    function updateLiquiditFee(uint256 value) external onlyOwner {\\r\\n        liquidityPoolFee = value;\\r\\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\\r\\n    }\\r\\n\\r\\n    function updateFuturFee(uint256 value) external onlyOwner {\\r\\n        expenseFee = value;\\r\\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\\r\\n    }\\r\\n\\r\\n    function updateMarketingFee(uint256 value) external onlyOwner {\\r\\n        marketingFee = value;\\r\\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\\r\\n    }\\r\\n\\r\\n    function updateSellFee(uint256 value) external onlyOwner {\\r\\n        sellFee = value;\\r\\n    }\\r\\n\\r\\n    function updateRwSwapFee(uint256 value) external onlyOwner {\\r\\n        rwSwap = value;\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            pair != uniswapV2Pair,\\r\\n            \\\"TKN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\"\\r\\n        );\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function blacklistMalicious(address account, bool value)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        _isBlacklisted[account] = value;\\r\\n    }\\r\\n\\r\\n    function setExcludedFromFee(address account, bool value) external onlyOwner\\r\\n    {\\r\\n        _isExcludedFromFee[account] = value;\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(\\r\\n            automatedMarketMakerPairs[pair] != value,\\r\\n            \\\"TKN: Automated market maker pair is already set to that value\\\"\\r\\n        );\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        \\r\\n        _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \\\"Blacklisted address\\\");\\r\\n\\r\\n        uint256 feeAmount = 0;\\r\\n        uint256 _amount;\\r\\n\\r\\n        if (!_isExcludedFromFee[from] && (to == address(uniswapV2Router) || to == address(uniswapV2Pair))) {\\r\\n            require(nodeRewardManager._isNodeOwner(from), \\\"Create at least one Brain!\\\");\\r\\n\\r\\n            feeAmount = amount.mul(sellFee).div(100);\\r\\n        }\\r\\n\\r\\n        _amount = amount.sub(feeAmount);\\r\\n\\r\\n        super._transfer(from, cashoutPool, feeAmount);\\r\\n        super._transfer(from, to, _amount);\\r\\n    }\\r\\n\\r\\n    function swapAndSendToFee(address destination, uint256 tokens) private {\\r\\n        uint256 initialETHBalance = address(this).balance;\\r\\n        swapTokensForEth(tokens);\\r\\n        uint256 newBalance = (address(this).balance).sub(initialETHBalance);\\r\\n        payable(destination).transfer(newBalance);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokens) private {\\r\\n        uint256 half = tokens.div(2);\\r\\n        uint256 otherHalf = tokens.sub(half);\\r\\n\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        swapTokensForEth(half);\\r\\n\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WAVAX();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidityAVAX{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(0),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function createNodeWithTokens(string memory name) public {\\r\\n        require(\\r\\n            bytes(name).length > 3 && bytes(name).length < 32,\\r\\n            \\\"NODE CREATION: NAME SIZE INVALID\\\"\\r\\n        );\\r\\n        address sender = _msgSender();\\r\\n        require(\\r\\n            sender != address(0),\\r\\n            \\\"NODE CREATION:  creation from the zero address\\\"\\r\\n        );\\r\\n        require(!_isBlacklisted[sender], \\\"NODE CREATION: Blacklisted address\\\");\\r\\n        require(\\r\\n            sender != expensePool && sender != distributionPool,\\r\\n            \\\"NODE CREATION: futur and rewardsPool cannot create node\\\"\\r\\n        );\\r\\n        uint256 nodePrice = nodeRewardManager.nodePrice();\\r\\n        require(\\r\\n            balanceOf(sender) >= nodePrice,\\r\\n            \\\"NODE CREATION: Balance too low for creation.\\\"\\r\\n        );\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool swapAmountOk = contractTokenBalance >= swapTokensAmount;\\r\\n        if (\\r\\n            swapAmountOk &&\\r\\n            swapLiquify &&\\r\\n            !swapping &&\\r\\n            sender != owner() &&\\r\\n            !automatedMarketMakerPairs[sender]\\r\\n        ) {\\r\\n            swapping = true;\\r\\n\\r\\n            uint256 futurTokens = contractTokenBalance.mul(expenseFee).div(100);\\r\\n\\r\\n            swapAndSendToFee(expensePool, futurTokens);\\r\\n\\r\\n            uint256 rewardsPoolTokens = contractTokenBalance\\r\\n            .mul(rewardsFee)\\r\\n            .div(100);\\r\\n\\r\\n            uint256 rewardsTokenstoSwap = rewardsPoolTokens.mul(rwSwap).div(\\r\\n                100\\r\\n            );\\r\\n\\r\\n            swapAndSendToFee(distributionPool, rewardsTokenstoSwap);\\r\\n            super._transfer(\\r\\n                address(this),\\r\\n                distributionPool,\\r\\n                rewardsPoolTokens.sub(rewardsTokenstoSwap)\\r\\n            );\\r\\n\\r\\n            uint256 swapTokens = contractTokenBalance.mul(liquidityPoolFee).div(\\r\\n                100\\r\\n            );\\r\\n\\r\\n            swapAndLiquify(swapTokens);\\r\\n\\r\\n            uint256 marketingTokens = contractTokenBalance.mul(marketingFee).div(100);\\r\\n\\r\\n            swapAndSendToFee(marketingPool, marketingTokens);\\r\\n\\r\\n            swapTokensForEth(balanceOf(address(this)));\\r\\n\\r\\n            swapping = false;\\r\\n        }\\r\\n        super._transfer(sender, address(this), nodePrice);\\r\\n        nodeRewardManager.createNode(sender, name);\\r\\n    }\\r\\n\\r\\n    function cashoutReward(uint256 blocktime) external {\\r\\n        address sender = _msgSender();\\r\\n        require(sender != address(0), \\\"CSHT:  creation from the zero address\\\");\\r\\n        require(!_isBlacklisted[sender], \\\"MANIA CSHT: Blacklisted address\\\");\\r\\n        require(\\r\\n            sender != expensePool && sender != distributionPool,\\r\\n            \\\"CSHT: futur and rewardsPool cannot cashout rewards\\\"\\r\\n        );\\r\\n        uint256 rewardAmount = nodeRewardManager._getRewardAmountOf(\\r\\n            sender,\\r\\n            blocktime\\r\\n        );\\r\\n        require(\\r\\n            rewardAmount > 0,\\r\\n            \\\"CSHT: You don't have enough reward to cash out\\\"\\r\\n        );\\r\\n\\r\\n        super._transfer(distributionPool, sender, rewardAmount);\\r\\n        nodeRewardManager._cashoutNodeReward(sender, blocktime);\\r\\n    }\\r\\n\\r\\n    function cashoutSpecificReward(uint256 _amount) external {\\r\\n      address sender = _msgSender();\\r\\n\\r\\n      require(_amount > 0, \\\"Amount can't be zero\\\");\\r\\n\\r\\n      require(\\r\\n          sender != address(0),\\r\\n          \\\"MANIA CSHT:  creation from the zero address\\\"\\r\\n      );\\r\\n      require(!_isBlacklisted[sender], \\\"MANIA CSHT: Blacklisted address\\\");\\r\\n      require(\\r\\n          sender != expensePool && sender != distributionPool,\\r\\n          \\\"MANIA CSHT: futur and rewardsPool cannot cashout rewards\\\"\\r\\n      );\\r\\n\\r\\n      uint256 rewardAmount = nodeRewardManager._getRewardAmountOf(sender);\\r\\n\\r\\n      require(\\r\\n          rewardAmount >= _amount,\\r\\n          \\\"CSHT: You don't have enough reward to cash out\\\"\\r\\n      );\\r\\n\\r\\n      super._transfer(distributionPool, sender, _amount);\\r\\n      nodeRewardManager._cashoutSpecificReward(sender, _amount);\\r\\n    }\\r\\n\\r\\n    function cashoutAll() public {\\r\\n        address sender = _msgSender();\\r\\n        require(\\r\\n            sender != address(0),\\r\\n            \\\"MANIA CSHT:  creation from the zero address\\\"\\r\\n        );\\r\\n        require(!_isBlacklisted[sender], \\\"MANIA CSHT: Blacklisted address\\\");\\r\\n        require(\\r\\n            sender != expensePool && sender != distributionPool,\\r\\n            \\\"MANIA CSHT: futur and rewardsPool cannot cashout rewards\\\"\\r\\n        );\\r\\n        uint256 rewardAmount = nodeRewardManager._getRewardAmountOf(sender);\\r\\n        require(\\r\\n            rewardAmount > 0,\\r\\n            \\\"MANIA CSHT: You don't have enough reward to cash out\\\"\\r\\n        );\\r\\n\\r\\n        super._transfer(distributionPool, sender, rewardAmount);\\r\\n        nodeRewardManager._cashoutAllNodesReward(sender);\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (bytes memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return buffer;\\r\\n    }\\r\\n\\r\\n    function compound(uint256 amount) external {\\r\\n        require(amount > 0, \\\"CMPD: Amount can't be zero\\\");\\r\\n\\r\\n        uint256 nodePrice = nodeRewardManager.nodePrice();\\r\\n\\r\\n        require(amount % nodePrice == 0, \\\"CMPD: Amount must be a multiple of the node price\\\");\\r\\n\\r\\n        uint256 count = amount / nodePrice;\\r\\n        uint256 i;\\r\\n        string memory name;\\r\\n        bytes memory basic;\\r\\n        address sender = _msgSender();\\r\\n\\r\\n        cashoutAll();\\r\\n\\r\\n        require(balanceOf(_msgSender()) >= amount, \\\"CMPD: Balance is not enough\\\");\\r\\n\\r\\n        basic = bytes.concat(\\\"BRAIN-\\\", toString(block.timestamp), toString(nodeRewardManager._getNodeNumberOf(sender)));\\r\\n\\r\\n        for (i = 1; i <= count; i++) {\\r\\n          name = string(bytes.concat(basic, toString(i)));\\r\\n          createNodeWithTokens(name);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function renameNode(string memory oldName, string memory newName) external {\\r\\n      require(\\r\\n        nodeRewardManager._isNodeOwner(_msgSender()),\\r\\n        \\\"NO NODE OWNER\\\"\\r\\n      );\\r\\n\\r\\n      require(\\r\\n        bytes(newName).length > 3 && bytes(newName).length < 32,\\r\\n        \\\"NODE RENAME: NAME SIZE INVALID\\\"\\r\\n      );\\r\\n\\r\\n      nodeRewardManager._renameNode(_msgSender(), oldName, newName);\\r\\n    }\\r\\n\\r\\n    function boostReward(uint amount) external onlyOwner {\\r\\n        if (amount > address(this).balance) amount = address(this).balance;\\r\\n        payable(owner()).transfer(amount);\\r\\n    }\\r\\n\\r\\n    function changeSwapLiquify(bool newVal) external onlyOwner {\\r\\n        swapLiquify = newVal;\\r\\n    }\\r\\n\\r\\n    function getNodeNumberOf(address account) public view returns (uint256) {\\r\\n        return nodeRewardManager._getNodeNumberOf(account);\\r\\n    }\\r\\n\\r\\n    function getRewardAmountOf(address account)\\r\\n    public\\r\\n    view\\r\\n    onlyOwner\\r\\n    returns (uint256)\\r\\n    {\\r\\n        return nodeRewardManager._getRewardAmountOf(account);\\r\\n    }\\r\\n\\r\\n    function getRewardAmount() public view returns (uint256) {\\r\\n        require(_msgSender() != address(0), \\\"SENDER CAN'T BE ZERO\\\");\\r\\n        require(\\r\\n            nodeRewardManager._isNodeOwner(_msgSender()),\\r\\n            \\\"NO NODE OWNER\\\"\\r\\n        );\\r\\n        return nodeRewardManager._getRewardAmountOf(_msgSender());\\r\\n    }\\r\\n\\r\\n    function changeNodePrice(uint256 newNodePrice) external onlyOwner {\\r\\n        nodeRewardManager._changeNodePrice(newNodePrice);\\r\\n    }\\r\\n\\r\\n    function getNodePrice() public view returns (uint256) {\\r\\n        return nodeRewardManager.nodePrice();\\r\\n    }\\r\\n\\r\\n    function changeRewardPerNode(uint256 newPrice) external onlyOwner {\\r\\n        nodeRewardManager._changeRewardPerNode(newPrice);\\r\\n    }\\r\\n\\r\\n    function getRewardPerNode() public view returns (uint256) {\\r\\n        return nodeRewardManager.rewardPerNode();\\r\\n    }\\r\\n\\r\\n    function changeClaimTime(uint256 newTime) external onlyOwner {\\r\\n        nodeRewardManager._changeClaimTime(newTime);\\r\\n    }\\r\\n\\r\\n    function getClaimTime() public view returns (uint256) {\\r\\n        return nodeRewardManager.claimTime();\\r\\n    }\\r\\n\\r\\n    function changeAutoDistri(bool newMode) external onlyOwner {\\r\\n        nodeRewardManager._changeAutoDistri(newMode);\\r\\n    }\\r\\n\\r\\n    function getAutoDistri() public view returns (bool) {\\r\\n        return nodeRewardManager.autoDistri();\\r\\n    }\\r\\n\\r\\n    function changeGasDistri(uint256 newGasDistri) external onlyOwner {\\r\\n        nodeRewardManager._changeGasDistri(newGasDistri);\\r\\n    }\\r\\n\\r\\n    function getGasDistri() public view returns (uint256) {\\r\\n        return nodeRewardManager.gasForDistribution();\\r\\n    }\\r\\n\\r\\n    function getDistriCount() public view returns (uint256) {\\r\\n        return nodeRewardManager.lastDistributionCount();\\r\\n    }\\r\\n\\r\\n    function getNodesNames() public view returns (string memory) {\\r\\n        require(_msgSender() != address(0), \\\"SENDER CAN'T BE ZERO\\\");\\r\\n        require(\\r\\n            nodeRewardManager._isNodeOwner(_msgSender()),\\r\\n            \\\"NO NODE OWNER\\\"\\r\\n        );\\r\\n        return nodeRewardManager._getNodesNames(_msgSender());\\r\\n    }\\r\\n\\r\\n    function getNodesCreatime() public view returns (string memory) {\\r\\n        require(_msgSender() != address(0), \\\"SENDER CAN'T BE ZERO\\\");\\r\\n        require(\\r\\n            nodeRewardManager._isNodeOwner(_msgSender()),\\r\\n            \\\"NO NODE OWNER\\\"\\r\\n        );\\r\\n        return nodeRewardManager._getNodesCreationTime(_msgSender());\\r\\n    }\\r\\n\\r\\n    function getNodesRewards() public view returns (string memory) {\\r\\n        require(_msgSender() != address(0), \\\"SENDER CAN'T BE ZERO\\\");\\r\\n        require(\\r\\n            nodeRewardManager._isNodeOwner(_msgSender()),\\r\\n            \\\"NO NODE OWNER\\\"\\r\\n        );\\r\\n        return nodeRewardManager._getNodesRewardAvailable(_msgSender());\\r\\n    }\\r\\n\\r\\n    function getNodesLastClaims() public view returns (string memory) {\\r\\n        require(_msgSender() != address(0), \\\"SENDER CAN'T BE ZERO\\\");\\r\\n        require(\\r\\n            nodeRewardManager._isNodeOwner(_msgSender()),\\r\\n            \\\"NO NODE OWNER\\\"\\r\\n        );\\r\\n        return nodeRewardManager._getNodesLastClaimTime(_msgSender());\\r\\n    }\\r\\n\\r\\n    function transferNode(address to, string memory nodeName) external returns (bool) {\\r\\n        return nodeRewardManager._transferNode(msg.sender, to, nodeName);\\r\\n    }\\r\\n\\r\\n    function distributeRewards()\\r\\n    external\\r\\n    onlyOwner\\r\\n    returns (\\r\\n        uint256,\\r\\n        uint256,\\r\\n        uint256\\r\\n    )\\r\\n    {\\r\\n        return nodeRewardManager._distributeRewards();\\r\\n    }\\r\\n\\r\\n    function publiDistriRewards() external {\\r\\n        nodeRewardManager._distributeRewards();\\r\\n    }\\r\\n\\r\\n    function getTotalStakedReward() public view returns (uint256) {\\r\\n        return nodeRewardManager.totalRewardStaked();\\r\\n    }\\r\\n\\r\\n    function getTotalCreatedNodes() public view returns (uint256) {\\r\\n        return nodeRewardManager.totalNodesCreated();\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa9e21d35c5b0be786948f7ccc7ae5e3855ca38aad026328c1c1fe7e3135bf9f0\",\"license\":\"MIT\"},\"contracts/NodeRewardController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary IterableMapping {\\r\\n    // Iterable mapping from address to uint;\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address => uint256) values;\\r\\n        mapping(address => uint256) indexOf;\\r\\n        mapping(address => bool) inserted;\\r\\n    }\\r\\n\\r\\n    function get(Map storage map, address key) internal view returns (uint256) {\\r\\n        return map.values[key];\\r\\n    }\\r\\n\\r\\n    function getIndexOfKey(Map storage map, address key)\\r\\n    internal\\r\\n    view\\r\\n    returns (int256)\\r\\n    {\\r\\n        if (!map.inserted[key]) {\\r\\n            return -1;\\r\\n        }\\r\\n        return int256(map.indexOf[key]);\\r\\n    }\\r\\n\\r\\n    function getKeyAtIndex(Map storage map, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (address)\\r\\n    {\\r\\n        return map.keys[index];\\r\\n    }\\r\\n\\r\\n    function size(Map storage map) internal view returns (uint256) {\\r\\n        return map.keys.length;\\r\\n    }\\r\\n\\r\\n    function set(\\r\\n        Map storage map,\\r\\n        address key,\\r\\n        uint256 val\\r\\n    ) internal {\\r\\n        if (map.inserted[key]) {\\r\\n            map.values[key] = val;\\r\\n        } else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, address key) internal {\\r\\n        if (!map.inserted[key]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint256 index = map.indexOf[key];\\r\\n        uint256 lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\\r\\ncontract NodeRewardController {\\r\\n    using SafeMath for uint256;\\r\\n    using IterableMapping for IterableMapping.Map;\\r\\n\\r\\n    struct NodeEntity {\\r\\n        string name;\\r\\n        uint256 creationTime;\\r\\n        uint256 lastClaimTime;\\r\\n        uint256 rewardAvailable;\\r\\n    }\\r\\n\\r\\n    IterableMapping.Map private nodeOwners;\\r\\n    mapping(address => NodeEntity[]) private _nodesOfUser;\\r\\n\\r\\n    uint256 public nodePrice;\\r\\n    uint256 public rewardPerNode;\\r\\n    uint256 public claimTime;\\r\\n\\r\\n    address public gateKeeper;\\r\\n    address public token;\\r\\n\\r\\n    bool public autoDistri = true;\\r\\n    bool public distribution = false;\\r\\n\\r\\n    uint256 public gasForDistribution = 300000;\\r\\n    uint256 public lastDistributionCount = 0;\\r\\n    uint256 public lastIndexProcessed = 0;\\r\\n\\r\\n    uint256 public totalNodesCreated = 0;\\r\\n    uint256 public totalRewardStaked = 0;\\r\\n\\r\\n    constructor(\\r\\n        uint256 _nodePrice,\\r\\n        uint256 _rewardPerNode,\\r\\n        uint256 _claimTime\\r\\n    ) {\\r\\n        nodePrice = _nodePrice;\\r\\n        rewardPerNode = _rewardPerNode;\\r\\n        claimTime = _claimTime;\\r\\n        gateKeeper = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlySentry() {\\r\\n        require(msg.sender == token || msg.sender == gateKeeper, \\\"Fuck off\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setToken (address token_) external onlySentry {\\r\\n        token = token_;\\r\\n    }\\r\\n\\r\\n    function distributeRewards(uint256 gas, uint256 rewardNode)\\r\\n    private\\r\\n    returns (\\r\\n        uint256,\\r\\n        uint256,\\r\\n        uint256\\r\\n    )\\r\\n    {\\r\\n        require(distribution == false);\\r\\n        distribution = true;\\r\\n        uint256 numberOfnodeOwners = nodeOwners.keys.length;\\r\\n        require(numberOfnodeOwners > 0, \\\"DISTRI REWARDS: NO NODE OWNERS\\\");\\r\\n\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n        uint256 newGasLeft;\\r\\n        uint256 localLastIndex = lastIndexProcessed;\\r\\n        uint256 iterations = 0;\\r\\n        uint256 newClaimTime = block.timestamp;\\r\\n        uint256 nodesCount;\\r\\n        uint256 claims = 0;\\r\\n        NodeEntity[] storage nodes;\\r\\n        NodeEntity storage _node;\\r\\n\\r\\n        while (gasUsed < gas && iterations < numberOfnodeOwners) {\\r\\n            localLastIndex++;\\r\\n            if (localLastIndex >= nodeOwners.keys.length) {\\r\\n                localLastIndex = 0;\\r\\n            }\\r\\n            nodes = _nodesOfUser[nodeOwners.keys[localLastIndex]];\\r\\n            nodesCount = nodes.length;\\r\\n            for (uint256 i = 0; i < nodesCount; i++) {\\r\\n                _node = nodes[i];\\r\\n                if (claimable(_node)) {\\r\\n                    _node.rewardAvailable += rewardNode;\\r\\n                    _node.lastClaimTime = newClaimTime;\\r\\n                    totalRewardStaked += rewardNode;\\r\\n                    claims++;\\r\\n                }\\r\\n            }\\r\\n            iterations++;\\r\\n\\r\\n            newGasLeft = gasleft();\\r\\n\\r\\n            if (gasLeft > newGasLeft) {\\r\\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\r\\n            }\\r\\n\\r\\n            gasLeft = newGasLeft;\\r\\n        }\\r\\n        lastDistributionCount = claims;\\r\\n        lastIndexProcessed = localLastIndex;\\r\\n        distribution = false;\\r\\n        return (iterations, claims, lastIndexProcessed);\\r\\n    }\\r\\n\\r\\n    function createNode(address account, string memory nodeName) external onlySentry {\\r\\n        require(\\r\\n            isNameAvailable(account, nodeName),\\r\\n            \\\"CREATE NODE: Name not available\\\"\\r\\n        );\\r\\n        _nodesOfUser[account].push(\\r\\n            NodeEntity({\\r\\n        name: nodeName,\\r\\n        creationTime: block.timestamp,\\r\\n        lastClaimTime: block.timestamp,\\r\\n        rewardAvailable: rewardPerNode\\r\\n        })\\r\\n        );\\r\\n        nodeOwners.set(account, _nodesOfUser[account].length);\\r\\n        totalNodesCreated++;\\r\\n        if (autoDistri && !distribution) {\\r\\n            distributeRewards(gasForDistribution, rewardPerNode);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _renameNode(address account, string memory oldName, string memory newName) external onlySentry {\\r\\n      uint256 index = _getNodeByName(account, oldName);\\r\\n      require(index != uint(int(-1)), \\\"Node doesn't exist\\\");\\r\\n\\r\\n      NodeEntity storage node = _nodesOfUser[account][index];\\r\\n      node.name = newName;\\r\\n    }\\r\\n\\r\\n    function isNameAvailable(address account, string memory nodeName)\\r\\n    private\\r\\n    view\\r\\n    returns (bool)\\r\\n    {\\r\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\r\\n        for (uint256 i = 0; i < nodes.length; i++) {\\r\\n            if (keccak256(bytes(nodes[i].name)) == keccak256(bytes(nodeName))) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 index) internal {\\r\\n        require(index < nodeOwners.size());\\r\\n        nodeOwners.remove(nodeOwners.getKeyAtIndex(index));\\r\\n    }\\r\\n\\r\\n    function _getNodeByName(address account, string memory name) private view returns (uint) {\\r\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\r\\n\\r\\n        for (uint256 i = 0; i < nodes.length; i++) {\\r\\n            if (keccak256(bytes(nodes[i].name)) == keccak256(bytes(name))) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return uint(int(-1));\\r\\n    }\\r\\n\\r\\n    function _getNodeWithCreatime(NodeEntity[] storage nodes, uint256 _creationTime) private view returns (NodeEntity storage) {\\r\\n        for (uint256 i = 0; i < nodes.length; i++) {\\r\\n            if (nodes[i].creationTime == _creationTime) {\\r\\n                return nodes[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert();\\r\\n    }\\r\\n    \\r\\n    function _cashoutNodeReward(address account, uint256 _creationTime)\\r\\n    external onlySentry\\r\\n    returns (uint256)\\r\\n    {\\r\\n        require(_creationTime > 0, \\\"NODE: CREATIME must be higher than zero\\\");\\r\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\r\\n        uint256 numberOfNodes = nodes.length;\\r\\n        require(\\r\\n            numberOfNodes > 0,\\r\\n            \\\"CASHOUT ERROR: You don't have nodes to cash-out\\\"\\r\\n        );\\r\\n        NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\\r\\n        uint256 rewardNode = node.rewardAvailable;\\r\\n        node.rewardAvailable = 0;\\r\\n        return rewardNode;\\r\\n    }\\r\\n\\r\\n    function _cashoutAllNodesReward(address account)\\r\\n    external onlySentry\\r\\n    returns (uint256)\\r\\n    {\\r\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\r\\n        uint256 nodesCount = nodes.length;\\r\\n        require(nodesCount > 0, \\\"NODE: Count must be higher than zero\\\");\\r\\n        NodeEntity storage _node;\\r\\n        uint256 rewardsTotal = 0;\\r\\n        for (uint256 i = 0; i < nodesCount; i++) {\\r\\n            _node = nodes[i];\\r\\n            rewardsTotal += _node.rewardAvailable;\\r\\n            _node.rewardAvailable = 0;\\r\\n        }\\r\\n        return rewardsTotal;\\r\\n    }\\r\\n\\r\\n    function _cashoutSpecificReward(address account, uint256 amount)\\r\\n      external onlySentry\\r\\n    {\\r\\n        uint256 leftAmount = amount;\\r\\n        uint256 rewardAmount = 0;\\r\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\r\\n        uint256 nodesCount = nodes.length;\\r\\n        require(nodesCount > 0, \\\"NODE: Count must be higher than zero\\\");\\r\\n        NodeEntity storage _node;\\r\\n        for (uint256 i = 0; i < nodesCount; i++) {\\r\\n            _node = nodes[i];\\r\\n            rewardAmount = _node.rewardAvailable;\\r\\n            if (rewardAmount < leftAmount) {\\r\\n              _node.rewardAvailable = 0;\\r\\n              leftAmount -= rewardAmount;\\r\\n            }\\r\\n            else {\\r\\n              _node.rewardAvailable = rewardAmount - leftAmount;\\r\\n              leftAmount = 0;\\r\\n              break;\\r\\n            }\\r\\n        }\\r\\n        require(leftAmount == 0, \\\"COSR: NOT ENOUGH REWARD\\\");\\r\\n    }\\r\\n\\r\\n    function claimable(NodeEntity memory node) private view returns (bool) {\\r\\n        return node.lastClaimTime + claimTime <= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function _getRewardAmountOf(address account)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256)\\r\\n    {\\r\\n        require(isNodeOwner(account), \\\"GET REWARD OF: NO NODE OWNER\\\");\\r\\n        uint256 nodesCount;\\r\\n        uint256 rewardCount = 0;\\r\\n\\r\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\r\\n        nodesCount = nodes.length;\\r\\n\\r\\n        for (uint256 i = 0; i < nodesCount; i++) {\\r\\n            rewardCount += nodes[i].rewardAvailable;\\r\\n        }\\r\\n\\r\\n        return rewardCount;\\r\\n    }\\r\\n\\r\\n    function _getRewardAmountOf(address account, uint256 _creationTime)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256)\\r\\n    {\\r\\n        require(isNodeOwner(account), \\\"GET REWARD OF: NO NODE OWNER\\\");\\r\\n\\r\\n        require(_creationTime > 0, \\\"NODE: CREATIME must be higher than zero\\\");\\r\\n        NodeEntity[] storage nodes = _nodesOfUser[account];\\r\\n        uint256 numberOfNodes = nodes.length;\\r\\n        require(\\r\\n            numberOfNodes > 0,\\r\\n            \\\"CASHOUT ERROR: You don't have nodes to cash-out\\\"\\r\\n        );\\r\\n        NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\\r\\n        uint256 rewardNode = node.rewardAvailable;\\r\\n        return rewardNode;\\r\\n    }\\r\\n\\r\\n    function _getNodeRewardAmountOf(address account, uint256 creationTime)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256)\\r\\n    {\\r\\n        return\\r\\n        _getNodeWithCreatime(_nodesOfUser[account], creationTime)\\r\\n        .rewardAvailable;\\r\\n    }\\r\\n\\r\\n    function _getNodesNames(address account)\\r\\n    external\\r\\n    view\\r\\n    returns (string memory)\\r\\n    {\\r\\n        require(isNodeOwner(account), \\\"GET NAMES: NO NODE OWNER\\\");\\r\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\r\\n        uint256 nodesCount = nodes.length;\\r\\n        NodeEntity memory _node;\\r\\n        string memory names = nodes[0].name;\\r\\n        string memory separator = \\\"#\\\";\\r\\n        for (uint256 i = 1; i < nodesCount; i++) {\\r\\n            _node = nodes[i];\\r\\n            names = string(abi.encodePacked(names, separator, _node.name));\\r\\n        }\\r\\n        return names;\\r\\n    }\\r\\n\\r\\n    function _getNodesCreationTime(address account)\\r\\n    external\\r\\n    view\\r\\n    returns (string memory)\\r\\n    {\\r\\n        require(isNodeOwner(account), \\\"GET CREATIME: NO NODE OWNER\\\");\\r\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\r\\n        uint256 nodesCount = nodes.length;\\r\\n        NodeEntity memory _node;\\r\\n        string memory _creationTimes = uint2str(nodes[0].creationTime);\\r\\n        string memory separator = \\\"#\\\";\\r\\n\\r\\n        for (uint256 i = 1; i < nodesCount; i++) {\\r\\n            _node = nodes[i];\\r\\n\\r\\n            _creationTimes = string(\\r\\n                abi.encodePacked(\\r\\n                    _creationTimes,\\r\\n                    separator,\\r\\n                    uint2str(_node.creationTime)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        return _creationTimes;\\r\\n    }\\r\\n\\r\\n    function _getNodesRewardAvailable(address account)\\r\\n    external\\r\\n    view\\r\\n    returns (string memory)\\r\\n    {\\r\\n        require(isNodeOwner(account), \\\"GET REWARD: NO NODE OWNER\\\");\\r\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\r\\n        uint256 nodesCount = nodes.length;\\r\\n        NodeEntity memory _node;\\r\\n        string memory _rewardsAvailable = uint2str(nodes[0].rewardAvailable);\\r\\n        string memory separator = \\\"#\\\";\\r\\n\\r\\n        for (uint256 i = 1; i < nodesCount; i++) {\\r\\n            _node = nodes[i];\\r\\n\\r\\n            _rewardsAvailable = string(\\r\\n                abi.encodePacked(\\r\\n                    _rewardsAvailable,\\r\\n                    separator,\\r\\n                    uint2str(_node.rewardAvailable)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        return _rewardsAvailable;\\r\\n    }\\r\\n\\r\\n    function _getNodesLastClaimTime(address account)\\r\\n    external\\r\\n    view\\r\\n    returns (string memory)\\r\\n    {\\r\\n        require(isNodeOwner(account), \\\"LAST CLAIME TIME: NO NODE OWNER\\\");\\r\\n        NodeEntity[] memory nodes = _nodesOfUser[account];\\r\\n        uint256 nodesCount = nodes.length;\\r\\n        NodeEntity memory _node;\\r\\n        string memory _lastClaimTimes = uint2str(nodes[0].lastClaimTime);\\r\\n        string memory separator = \\\"#\\\";\\r\\n\\r\\n        for (uint256 i = 1; i < nodesCount; i++) {\\r\\n            _node = nodes[i];\\r\\n\\r\\n            _lastClaimTimes = string(\\r\\n                abi.encodePacked(\\r\\n                    _lastClaimTimes,\\r\\n                    separator,\\r\\n                    uint2str(_node.lastClaimTime)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        return _lastClaimTimes;\\r\\n    }\\r\\n\\r\\n    function uint2str(uint256 _i)\\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory _uintAsString)\\r\\n    {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = _i;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    function _changeNodePrice(uint256 newNodePrice) external onlySentry {\\r\\n        nodePrice = newNodePrice;\\r\\n    }\\r\\n\\r\\n    function _changeRewardPerNode(uint256 newPrice) external onlySentry {\\r\\n        rewardPerNode = newPrice;\\r\\n    }\\r\\n\\r\\n    function _changeClaimTime(uint256 newTime) external onlySentry {\\r\\n        claimTime = newTime;\\r\\n    }\\r\\n\\r\\n    function _changeAutoDistri(bool newMode) external onlySentry {\\r\\n        autoDistri = newMode;\\r\\n    }\\r\\n\\r\\n    function _changeGasDistri(uint256 newGasDistri) external onlySentry {\\r\\n        gasForDistribution = newGasDistri;\\r\\n    }\\r\\n\\r\\n    function _getNodeNumberOf(address account) public view returns (uint256) {\\r\\n        return nodeOwners.get(account);\\r\\n    }\\r\\n\\r\\n    function isNodeOwner(address account) private view returns (bool) {\\r\\n        return nodeOwners.get(account) > 0;\\r\\n    }\\r\\n\\r\\n    function _isNodeOwner(address account) external view returns (bool) {\\r\\n        return isNodeOwner(account);\\r\\n    }\\r\\n\\r\\n    function _distributeRewards()\\r\\n    external  onlySentry\\r\\n    returns (\\r\\n        uint256,\\r\\n        uint256,\\r\\n        uint256\\r\\n    )\\r\\n    {\\r\\n        return distributeRewards(gasForDistribution, rewardPerNode);\\r\\n    }\\r\\n\\r\\n    function _transferNode(address from, address to, string memory nodeName) \\r\\n                                                    external onlySentry returns (bool) {\\r\\n\\r\\n        require(!isNameAvailable(from, nodeName), \\\"\\\");\\r\\n\\r\\n        require(isNameAvailable(to, nodeName), \\\"\\\");\\r\\n\\r\\n        uint index = _getNodeByName(from, nodeName);\\r\\n\\r\\n        require(index != uint(int(-1)), \\\"Node does not exist\\\");\\r\\n\\r\\n        NodeEntity[] storage nodes = _nodesOfUser[from];\\r\\n        uint last = nodes.length - 1;\\r\\n\\r\\n        _nodesOfUser[to].push(nodes[index]);\\r\\n\\r\\n        nodes[index] = nodes[last];\\r\\n        nodes.pop();\\r\\n\\r\\n        nodeOwners.set(from, _nodesOfUser[from].length);\\r\\n        nodeOwners.set(to, _nodesOfUser[to].length);\\r\\n\\r\\n        if (last == 1)\\r\\n            nodeOwners.remove(from);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x60a3d010a2d609d41a6f029719c307971901740ec73c473c9b0ab9af165bbf0e\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IJoeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function migrator() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function setMigrator(address) external;\\r\\n}\",\"keccak256\":\"0x252614a05b23c3d7fb127b19d7acb150c6380dada90b2cadf1e2bb56660216de\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IJoeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WAVAX() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n    external\\r\\n    returns (\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n\\r\\n    function addLiquidityAVAX(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n        uint256 amountToken,\\r\\n        uint256 amountAVAX,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityAVAX(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityAVAXWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactAVAXForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactAVAX(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForAVAX(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapAVAXForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n}\",\"keccak256\":\"0x4ddf67a4004bb4905e938e9fd045d7b1507db519b6698d66b9ba08421a8430c4\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IJoeRouter01.sol\\\";\\r\\n\\r\\ninterface IJoeRouter02 is IJoeRouter01 {\\r\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountAVAX);\\r\\n\\r\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountAVAXMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountAVAX);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8d3dc5c9029292a1b89ae5076567b25916ccdc2b0bcb316fdb84b1b9b5fcb341\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600e80546001600160a01b03191661dead1790556016805461ffff1916610100179055681043561a88293000006017556c0c9f2c9cd04674edea400000006018553480156200005257600080fd5b5060405162004bdf38038062004bdf83398101604081905262000075916200086f565b604080518082018252600981526822b0b9bcaa37b5b2b760b91b6020808301918252835180850190945260048452634541535960e01b908401528151919291620000c2916003916200078f565b508051620000d89060049060208401906200078f565b505050620000f5620000ef6200063f60201b60201c565b62000643565b82516005146200014c5760405162461bcd60e51b815260206004820152601c60248201527f436f756e74206f6620416464726573736573206d75737420626520350000000060448201526064015b60405180910390fd5b600680546001600160a01b0319166001600160a01b038316179055825183906000906200018957634e487b7160e01b600052603260045260246000fd5b6020026020010151600c60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600181518110620001d957634e487b7160e01b600052603260045260246000fd5b6020026020010151600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826002815181106200022957634e487b7160e01b600052603260045260246000fd5b6020026020010151600b60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826003815181106200027957634e487b7160e01b600052603260045260246000fd5b6020026020010151600960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600481518110620002c957634e487b7160e01b600052603260045260246000fd5b6020026020010151600d60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060005b600581101562000372576001601b60008684815181106200032b57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806200036981620009c1565b915050620002fa565b506009546001600160a01b031615801590620003985750600a546001600160a01b031615155b620003f45760405162461bcd60e51b815260206004820152602560248201527f465554555220262052455741524420414444524553532043414e4e4f54204245604482015264205a45524f60d81b606482015260840162000143565b603c600f819055601e601081905560056014819055601181905560158290556200044a9290916200043691839183919062000695602090811b62002e3d17901c565b6200069560201b62002e3d1790919060201c565b601255600c5460185462000468916001600160a01b031690620006aa565b600780546001600160a01b0319166001600160a01b0384169081179091556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b158015620004bd57600080fd5b505afa158015620004d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004f8919062000852565b6001600160a01b031663c9c6539630600760009054906101000a90046001600160a01b03166001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156200055657600080fd5b505afa1580156200056b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000591919062000852565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b158015620005da57600080fd5b505af1158015620005ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000615919062000852565b600880546001600160a01b0319166001600160a01b03929092169190911790555062000a0b915050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000620006a3828462000969565b9392505050565b6001600160a01b038216620007025760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000143565b806002600082825462000716919062000969565b90915550506001600160a01b038216600090815260208190526040812080548392906200074590849062000969565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546200079d9062000984565b90600052602060002090601f016020900481019282620007c157600085556200080c565b82601f10620007dc57805160ff19168380011785556200080c565b828001600101855582156200080c579182015b828111156200080c578251825591602001919060010190620007ef565b506200081a9291506200081e565b5090565b5b808211156200081a57600081556001016200081f565b80516001600160a01b03811681146200084d57600080fd5b919050565b60006020828403121562000864578081fd5b620006a38262000835565b60008060006060848603121562000884578182fd5b83516001600160401b03808211156200089b578384fd5b818601915086601f830112620008af578384fd5b8151602082821115620008c657620008c6620009f5565b8160051b604051601f19603f83011681018181108682111715620008ee57620008ee620009f5565b604052838152828101945085830182870184018c10156200090d578889fd5b8896505b848710156200093a57620009258162000835565b86526001969096019594830194830162000911565b5097506200094c905088820162000835565b955050505050620009606040850162000835565b90509250925092565b600082198211156200097f576200097f620009df565b500190565b600181811c908216806200099957607f821691505b60208210811415620009bb57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620009d857620009d8620009df565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6141c48062000a1b6000396000f3fe608060405234801561001057600080fd5b506004361061046a5760003560e01c80637e8100c01161024c578063b62496f511610146578063da41b333116100c3578063f5a0725611610087578063f5a0725614610998578063f74c9934146109a0578063f7b9f943146109b3578063f9afc763146109bb578063fb0a7494146109c357600080fd5b8063da41b33314610934578063db3ad6b51461093c578063dd62ed3e14610944578063ee1afdbf1461097d578063f2fde38b1461098557600080fd5b8063c5ca7d6d1161010a578063c5ca7d6d146108d5578063cf382877146108e8578063d0c298b3146108fb578063d0f774741461090e578063d89293421461092157600080fd5b8063b62496f514610871578063b96392c114610894578063bbc7d0b9146108a7578063bdf24a53146108ba578063c04b4637146108c257600080fd5b8063938bc811116101d4578063a0a8fe6511610198578063a0a8fe6514610828578063a457c2d714610830578063a5021a1714610843578063a9059cbb1461084b578063aa5f7e261461085e57600080fd5b8063938bc811146107d457806395d89b41146107e75780639a7a23d6146107ef5780639b87682a146108025780639c82751c1461081557600080fd5b806388c41d7c1161021b57806388c41d7c146107775780638bc9c7b01461078a5780638da5cb5b1461079d5780638f0ba4ca146107ae5780639349c47d146107c157600080fd5b80637e8100c0146107405780638013858b1461074957806385141a771461075c5780638743ef6d1461076f57600080fd5b806342bc9fca116103685780635f1c3182116102e55780636f4a2cd0116102a95780636f4a2cd0146106c657806370a08231146106e9578063715018a6146107125780637628b3d71461071a5780637b7703921461072d57600080fd5b80635f1c31821461067b57806365bfe430146106845780636612e66f146106975780636770474b146106aa5780636b67c4df146106bd57600080fd5b806354f12f1f1161032c57806354f12f1f14610631578063583bd7a61461063a57806359640ed91461064d5780635a63ddbb146106605780635b0d46741461067357600080fd5b806342bc9fca146105e857806348df5829146105fb57806348e5642b1461060e57806349bd5a5e14610616578063545579731461062957600080fd5b806318160ddd116103f65780632bb14e1d116103ba5780632bb14e1d14610597578063313ce567146105a05780633655af8c146105af57806339509351146105c25780634195fbf3146105d557600080fd5b806318160ddd1461053d5780631cdd3be3146105455780631d933a4a1461056857806323b872dd1461057b5780632b14ca561461058e57600080fd5b806309a69f571161043d57806309a69f57146104d85780630ab38aa3146104ee57806313114a9d14610501578063138a634a1461050a5780631694505e1461051257600080fd5b8063016cffb21461046f57806306fdde0314610484578063084a6bff146104a2578063095ea7b3146104b5575b600080fd5b61048261047d3660046138d7565b6109d6565b005b61048c610a2b565b6040516104999190613cee565b60405180910390f35b6104826104b0366004613b62565b610abd565b6104c86104c3366004613a02565b610b13565b6040519015158152602001610499565b6104e0610b2b565b604051908152602001610499565b6104826104fc3660046138d7565b610c7d565b6104e060125481565b61048c610cc9565b600754610525906001600160a01b031681565b6040516001600160a01b039091168152602001610499565b6002546104e0565b6104c86105533660046138d7565b60196020526000908152604090205460ff1681565b610482610576366004613b62565b610e1b565b6104c8610589366004613947565b610e4a565b6104e060135481565b6104e0600f5481565b60405160128152602001610499565b6104826105bd366004613b62565b610e8f565b6104c86105d0366004613a02565b61109d565b6104826105e3366004613b62565b6110d7565b6104826105f6366004613b62565b61114a565b600c54610525906001600160a01b031681565b6104e0611193565b600854610525906001600160a01b031681565b6104826111d8565b6104e060105481565b610482610648366004613a2d565b6113ff565b61048261065b366004613b62565b611443565b600954610525906001600160a01b031681565b61048c6114cf565b6104e060175481565b610482610692366004613b62565b6115aa565b6104826106a5366004613987565b61181c565b6104826106b8366004613b62565b611871565b6104e060145481565b6106ce6118a0565b60408051938452602084019290925290820152606001610499565b6104e06106f73660046138d7565b6001600160a01b031660009081526020819052604090205490565b610482611979565b600654610525906001600160a01b031681565b61048261073b366004613b62565b6119af565b6104e060115481565b610482610757366004613b62565b611a0a565b600e54610525906001600160a01b031681565b610482611a65565b610482610785366004613b62565b611aed565b610482610798366004613b62565b611b41565b6005546001600160a01b0316610525565b6104826107bc366004613a65565b611b70565b6104826107cf3660046138d7565b612078565b6104c86107e23660046139b4565b6120c4565b61048c612152565b6104826107fd366004613987565b612161565b610482610810366004613b0b565b61222c565b610482610823366004613b62565b612397565b6104e06123f2565b6104c861083e366004613a02565b612437565b6104e06124d4565b6104c8610859366004613a02565b612519565b61048261086c366004613b62565b61252f565b6104c861087f3660046138d7565b601a6020526000908152604090205460ff1681565b6104e06108a23660046138d7565b6127e5565b600b54610525906001600160a01b031681565b61048c612896565b600d54610525906001600160a01b031681565b600a54610525906001600160a01b031681565b6104826108f6366004613b62565b612971565b6104826109093660046138d7565b6129ba565b61048261091c366004613a2d565b612a06565b61048261092f366004613987565b612a62565b6104e0612ab7565b6104e0612afc565b6104e061095236600461390f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61048c612b41565b6104826109933660046138d7565b612c1c565b6104e0612cb7565b6104e06109ae3660046138d7565b612cfc565b6104e0612d2f565b6104c8612d74565b6104826109d13660046138d7565b612df1565b6005546001600160a01b03163314610a095760405162461bcd60e51b8152600401610a0090613e7b565b60405180910390fd5b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b606060038054610a3a90614097565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6690614097565b8015610ab35780601f10610a8857610100808354040283529160200191610ab3565b820191906000526020600020905b815481529060010190602001808311610a9657829003601f168201915b5050505050905090565b6005546001600160a01b03163314610ae75760405162461bcd60e51b8152600401610a0090613e7b565b600f819055601454601154601054610b0d9291610b079182908690612e3d565b90612e3d565b60125550565b600033610b21818585612e49565b5060019392505050565b600033610b4a5760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd39190613a49565b610bef5760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b031663619a635e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190613b7a565b905090565b6005546001600160a01b03163314610ca75760405162461bcd60e51b8152600401610a0090613e7b565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b606033610ce85760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610d3957600080fd5b505afa158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d719190613a49565b610d8d5760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b031663334de3a2335b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160006040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c789190810190613a98565b6005546001600160a01b03163314610e455760405162461bcd60e51b8152600401610a0090613e7b565b601355565b6000610e57848484612f6d565b610b218433610e8a8560405180606001604052806028815260200161416760289139610e838a33610952565b91906131a7565b612e49565b3381610ed45760405162461bcd60e51b8152602060048201526014602482015273416d6f756e742063616e2774206265207a65726f60601b6044820152606401610a00565b6001600160a01b038116610efa5760405162461bcd60e51b8152600401610a0090613ef5565b6001600160a01b03811660009081526019602052604090205460ff1615610f335760405162461bcd60e51b8152600401610a0090613de7565b6009546001600160a01b03828116911614801590610f5f5750600a546001600160a01b03828116911614155b610f7b5760405162461bcd60e51b8152600401610a0090613e1e565b6006546040516330cd31af60e11b81526001600160a01b038381166004830152600092169063619a635e9060240160206040518083038186803b158015610fc157600080fd5b505afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff99190613b7a565b90508281101561101b5760405162461bcd60e51b8152600401610a0090613d99565b600a54611032906001600160a01b031683856131d3565b600654604051636a8968a760e01b81526001600160a01b0384811660048301526024820186905290911690636a8968a790604401600060405180830381600087803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b50505050505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610b219082908690610e8a908790614009565b6005546001600160a01b031633146111015760405162461bcd60e51b8152600401610a0090613e7b565b4781111561110c5750475b6005546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611146573d6000803e3d6000fd5b5050565b6005546001600160a01b031633146111745760405162461bcd60e51b8152600401610a0090613e7b565b6010819055601454601154600f54610b0d9291610b0791829086612e3d565b600654604080516345193f5560e11b815290516000926001600160a01b031691638a327eaa916004808301926020929190829003018186803b158015610c4057600080fd5b33806111f65760405162461bcd60e51b8152600401610a0090613ef5565b6001600160a01b03811660009081526019602052604090205460ff161561122f5760405162461bcd60e51b8152600401610a0090613de7565b6009546001600160a01b0382811691161480159061125b5750600a546001600160a01b03828116911614155b6112775760405162461bcd60e51b8152600401610a0090613e1e565b6006546040516330cd31af60e11b81526001600160a01b038381166004830152600092169063619a635e9060240160206040518083038186803b1580156112bd57600080fd5b505afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f59190613b7a565b9050600081116113645760405162461bcd60e51b815260206004820152603460248201527f4d414e494120435348543a20596f7520646f6e2774206861766520656e6f75676044820152731a081c995dd85c99081d1bc818d85cda081bdd5d60621b6064820152608401610a00565b600a5461137b906001600160a01b031683836131d3565b60065460405163170a62c760e21b81526001600160a01b03848116600483015290911690635c298b1c90602401602060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa9190613b7a565b505050565b6005546001600160a01b031633146114295760405162461bcd60e51b8152600401610a0090613e7b565b601680549115156101000261ff0019909216919091179055565b6005546001600160a01b0316331461146d5760405162461bcd60e51b8152600401610a0090613e7b565b600654604051631df3773160e31b8152600481018390526001600160a01b039091169063ef9bb988906024015b600060405180830381600087803b1580156114b457600080fd5b505af11580156114c8573d6000803e3d6000fd5b5050505050565b6060336114ee5760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561153f57600080fd5b505afa158015611553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115779190613a49565b6115935760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b0316634a389fae33610da0565b33806116065760405162461bcd60e51b815260206004820152602560248201527f435348543a20206372656174696f6e2066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a00565b6001600160a01b03811660009081526019602052604090205460ff161561163f5760405162461bcd60e51b8152600401610a0090613de7565b6009546001600160a01b0382811691161480159061166b5750600a546001600160a01b03828116911614155b6116d25760405162461bcd60e51b815260206004820152603260248201527f435348543a20667574757220616e642072657761726473506f6f6c2063616e6e6044820152716f7420636173686f7574207265776172647360701b6064820152608401610a00565b6006546040516329b8573160e21b81526001600160a01b03838116600483015260248201859052600092169063a6e15cc49060440160206040518083038186803b15801561171f57600080fd5b505afa158015611733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117579190613b7a565b9050600081116117795760405162461bcd60e51b8152600401610a0090613d99565b600a54611790906001600160a01b031683836131d3565b60065460405163376db80160e11b81526001600160a01b0384811660048301526024820186905290911690636edb700290604401602060405180830381600087803b1580156117de57600080fd5b505af11580156117f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118169190613b7a565b50505050565b6005546001600160a01b031633146118465760405162461bcd60e51b8152600401610a0090613e7b565b6001600160a01b03919091166000908152601b60205260409020805460ff1916911515919091179055565b6005546001600160a01b0316331461189b5760405162461bcd60e51b8152600401610a0090613e7b565b601755565b60008080336001600160a01b03166118c06005546001600160a01b031690565b6001600160a01b0316146118e65760405162461bcd60e51b8152600401610a0090613e7b565b600660009054906101000a90046001600160a01b03166001600160a01b03166388fe65536040518163ffffffff1660e01b8152600401606060405180830381600087803b15801561193657600080fd5b505af115801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e9190613b92565b925092509250909192565b6005546001600160a01b031633146119a35760405162461bcd60e51b8152600401610a0090613e7b565b6119ad6000613327565b565b6005546001600160a01b031633146119d95760405162461bcd60e51b8152600401610a0090613e7b565b6006546040516318df5db960e31b8152600481018390526001600160a01b039091169063c6faedc89060240161149a565b6005546001600160a01b03163314611a345760405162461bcd60e51b8152600401610a0090613e7b565b60065460405163cece91eb60e01b8152600481018390526001600160a01b039091169063cece91eb9060240161149a565b600660009054906101000a90046001600160a01b03166001600160a01b03166388fe65536040518163ffffffff1660e01b8152600401606060405180830381600087803b158015611ab557600080fd5b505af1158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa9190613b92565b6005546001600160a01b03163314611b175760405162461bcd60e51b8152600401610a0090613e7b565b80601181905550610b0d601454610b07601154610b07601054600f54612e3d90919063ffffffff16565b6005546001600160a01b03163314611b6b5760405162461bcd60e51b8152600401610a0090613e7b565b601555565b60038151118015611b82575060208151105b611bce5760405162461bcd60e51b815260206004820181905260248201527f4e4f4445204352454154494f4e3a204e414d452053495a4520494e56414c49446044820152606401610a00565b3380611c335760405162461bcd60e51b815260206004820152602e60248201527f4e4f4445204352454154494f4e3a20206372656174696f6e2066726f6d20746860448201526d65207a65726f206164647265737360901b6064820152608401610a00565b6001600160a01b03811660009081526019602052604090205460ff1615611ca75760405162461bcd60e51b815260206004820152602260248201527f4e4f4445204352454154494f4e3a20426c61636b6c6973746564206164647265604482015261737360f01b6064820152608401610a00565b6009546001600160a01b03828116911614801590611cd35750600a546001600160a01b03828116911614155b611d455760405162461bcd60e51b815260206004820152603760248201527f4e4f4445204352454154494f4e3a20667574757220616e64207265776172647360448201527f506f6f6c2063616e6e6f7420637265617465206e6f64650000000000000000006064820152608401610a00565b60065460408051631e3fd85760e31b815290516000926001600160a01b03169163f1fec2b8916004808301926020929190829003018186803b158015611d8a57600080fd5b505afa158015611d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc29190613b7a565b905080611de4836001600160a01b031660009081526020819052604090205490565b1015611e475760405162461bcd60e51b815260206004820152602c60248201527f4e4f4445204352454154494f4e3a2042616c616e636520746f6f206c6f77206660448201526b37b91031b932b0ba34b7b71760a11b6064820152608401610a00565b3060009081526020819052604090205460175481108015908190611e725750601654610100900460ff165b8015611e81575060165460ff16155b8015611e9b57506005546001600160a01b03858116911614155b8015611ec057506001600160a01b0384166000908152601a602052604090205460ff16155b15612002576016805460ff19166001179055601154600090611ef090606490611eea908690613379565b90613385565b600954909150611f09906001600160a01b031682613391565b6000611f256064611eea600f548761337990919063ffffffff16565b90506000611f436064611eea6015548561337990919063ffffffff16565b600a54909150611f5c906001600160a01b031682613391565b600a54611f7d9030906001600160a01b0316611f7885856133e0565b6131d3565b6000611f996064611eea6010548961337990919063ffffffff16565b9050611fa4816133ec565b6000611fc06064611eea6014548a61337990919063ffffffff16565b600b54909150611fd9906001600160a01b031682613391565b30600090815260208190526040902054611ff290613473565b50506016805460ff191690555050505b61200d8430856131d3565b6006546040516312b8603f60e01b81526001600160a01b03909116906312b8603f9061203f9087908990600401613c8a565b600060405180830381600087803b15801561205957600080fd5b505af115801561206d573d6000803e3d6000fd5b505050505050505050565b6005546001600160a01b031633146120a25760405162461bcd60e51b8152600401610a0090613e7b565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60065460405163fe58340b60e01b81526000916001600160a01b03169063fe58340b906120f990339087908790600401613c5e565b602060405180830381600087803b15801561211357600080fd5b505af1158015612127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214b9190613a49565b9392505050565b606060048054610a3a90614097565b6005546001600160a01b0316331461218b5760405162461bcd60e51b8152600401610a0090613e7b565b6008546001600160a01b03838116911614156122225760405162461bcd60e51b815260206004820152604a60248201527f544b4e3a205468652050616e63616b655377617020706169722063616e6e6f7460448201527f2062652072656d6f7665642066726f6d206175746f6d617465644d61726b65746064820152694d616b6572506169727360b01b608482015260a401610a00565b61114682826135c2565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561227d57600080fd5b505afa158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b59190613a49565b6122d15760405162461bcd60e51b8152600401610a0090613d44565b600381511180156122e3575060208151105b61232f5760405162461bcd60e51b815260206004820152601e60248201527f4e4f44452052454e414d453a204e414d452053495a4520494e56414c494400006044820152606401610a00565b6006546001600160a01b0316635f3dc7043384846040518463ffffffff1660e01b815260040161236193929190613cae565b600060405180830381600087803b15801561237b57600080fd5b505af115801561238f573d6000803e3d6000fd5b505050505050565b6005546001600160a01b031633146123c15760405162461bcd60e51b8152600401610a0090613e7b565b60065460405163d1871a8960e01b8152600481018390526001600160a01b039091169063d1871a899060240161149a565b6006546040805163b8527aef60e01b815290516000926001600160a01b03169163b8527aef916004808301926020929190829003018186803b158015610c4057600080fd5b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156124bc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a00565b6124c98286868403612e49565b506001949350505050565b60065460408051631e3fd85760e31b815290516000926001600160a01b03169163f1fec2b8916004808301926020929190829003018186803b158015610c4057600080fd5b6000612526338484612f6d565b50600192915050565b6000811161257f5760405162461bcd60e51b815260206004820152601a60248201527f434d50443a20416d6f756e742063616e2774206265207a65726f0000000000006044820152606401610a00565b60065460408051631e3fd85760e31b815290516000926001600160a01b03169163f1fec2b8916004808301926020929190829003018186803b1580156125c457600080fd5b505afa1580156125d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fc9190613b7a565b905061260881836140ed565b1561266f5760405162461bcd60e51b815260206004820152603160248201527f434d50443a20416d6f756e74206d7573742062652061206d756c7469706c65206044820152706f6620746865206e6f646520707269636560781b6064820152608401610a00565b600061267b8284614021565b905060006060803361268b6111d8565b86612695336106f7565b10156126e35760405162461bcd60e51b815260206004820152601b60248201527f434d50443a2042616c616e6365206973206e6f7420656e6f75676800000000006044820152606401610a00565b6126ec426136ab565b60065460405163112469f960e21b81526001600160a01b038481166004830152612770921690634491a7e49060240160206040518083038186803b15801561273357600080fd5b505afa158015612747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276b9190613b7a565b6136ab565b604051602001612781929190613c1a565b6040516020818303038152906040529150600193505b84841161109457816127a8856136ab565b6040516020016127b9929190613beb565b60405160208183030381529060405292506127d383611b70565b836127dd816140d2565b945050612797565b6005546000906001600160a01b031633146128125760405162461bcd60e51b8152600401610a0090613e7b565b6006546040516330cd31af60e11b81526001600160a01b0384811660048301529091169063619a635e906024015b60206040518083038186803b15801561285857600080fd5b505afa15801561286c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128909190613b7a565b92915050565b6060336128b55760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561290657600080fd5b505afa15801561291a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293e9190613a49565b61295a5760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b031663c92819ce33610da0565b6005546001600160a01b0316331461299b5760405162461bcd60e51b8152600401610a0090613e7b565b6014819055601154601054600f54610b0d928492610b07928391612e3d565b6005546001600160a01b031633146129e45760405162461bcd60e51b8152600401610a0090613e7b565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314612a305760405162461bcd60e51b8152600401610a0090613e7b565b600654604051636d58441560e11b815282151560048201526001600160a01b039091169063dab0882a9060240161149a565b6005546001600160a01b03163314612a8c5760405162461bcd60e51b8152600401610a0090613e7b565b6001600160a01b03919091166000908152601960205260409020805460ff1916911515919091179055565b6006546040805163fb10d6fb60e01b815290516000926001600160a01b03169163fb10d6fb916004808301926020929190829003018186803b158015610c4057600080fd5b6006546040805163613ff46f60e01b815290516000926001600160a01b03169163613ff46f916004808301926020929190829003018186803b158015610c4057600080fd5b606033612b605760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015612bb157600080fd5b505afa158015612bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be99190613a49565b612c055760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b0316635759fb0233610da0565b6005546001600160a01b03163314612c465760405162461bcd60e51b8152600401610a0090613e7b565b6001600160a01b038116612cab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a00565b612cb481613327565b50565b600654604080516327b3bf1160e01b815290516000926001600160a01b0316916327b3bf11916004808301926020929190829003018186803b158015610c4057600080fd5b60065460405163112469f960e21b81526001600160a01b0383811660048301526000921690634491a7e490602401612840565b60065460408051636f60a39360e11b815290516000926001600160a01b03169163dec14726916004808301926020929190829003018186803b158015610c4057600080fd5b600654604080516385c44d9d60e01b815290516000926001600160a01b0316916385c44d9d916004808301926020929190829003018186803b158015612db957600080fd5b505afa158015612dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190613a49565b6005546001600160a01b03163314612e1b5760405162461bcd60e51b8152600401610a0090613e7b565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600061214b8284614009565b6001600160a01b038316612eab5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a00565b6001600160a01b038216612f0c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a00565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316612f935760405162461bcd60e51b8152600401610a0090613eb0565b6001600160a01b038216612fb95760405162461bcd60e51b8152600401610a0090613d01565b6001600160a01b03831660009081526019602052604090205460ff16158015612ffb57506001600160a01b03821660009081526019602052604090205460ff16155b61303d5760405162461bcd60e51b8152602060048201526013602482015272426c61636b6c6973746564206164647265737360681b6044820152606401610a00565b6001600160a01b0383166000908152601b6020526040812054819060ff1615801561308c57506007546001600160a01b038581169116148061308c57506008546001600160a01b038581169116145b156131775760065460405163041ac82b60e41b81526001600160a01b038781166004830152909116906341ac82b09060240160206040518083038186803b1580156130d657600080fd5b505afa1580156130ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310e9190613a49565b61315a5760405162461bcd60e51b815260206004820152601a60248201527f437265617465206174206c65617374206f6e6520427261696e210000000000006044820152606401610a00565b6131746064611eea6013548661337990919063ffffffff16565b91505b61318183836133e0565b600d5490915061319c9086906001600160a01b0316846131d3565b6114c88585836131d3565b600081848411156131cb5760405162461bcd60e51b8152600401610a009190613cee565b505050900390565b6001600160a01b0383166131f95760405162461bcd60e51b8152600401610a0090613eb0565b6001600160a01b03821661321f5760405162461bcd60e51b8152600401610a0090613d01565b6001600160a01b038316600090815260208190526040902054818110156132975760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a00565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906132ce908490614009565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161331a91815260200190565b60405180910390a3611816565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061214b8284614035565b600061214b8284614021565b4761339b82613473565b60006133a747836133e0565b6040519091506001600160a01b0385169082156108fc029083906000818181858888f193505050501580156114c8573d6000803e3d6000fd5b600061214b8284614054565b60006133f9826002613385565b9050600061340783836133e0565b90504761341383613473565b600061341f47836133e0565b905061342b83826137cd565b60408051858152602081018390529081018490527f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619060600160405180910390a15050505050565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106134b657634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201810191909152600754604080516339d94ae160e11b8152905191909316926373b295c2926004808301939192829003018186803b15801561350a57600080fd5b505afa15801561351e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354291906138f3565b8160018151811061356357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526007546135899130911684612e49565b600754604051633b158ab160e11b81526001600160a01b039091169063762b156290612361908590600090869030904290600401613f40565b6001600160a01b0382166000908152601a602052604090205460ff16151581151514156136575760405162461bcd60e51b815260206004820152603d60248201527f544b4e3a204175746f6d61746564206d61726b6574206d616b6572207061697260448201527f20697320616c72656164792073657420746f20746861742076616c75650000006064820152608401610a00565b6001600160a01b0382166000818152601a6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6060816136cf5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156136f957806136e3816140d2565b91506136f29050600a83614021565b91506136d3565b60008167ffffffffffffffff81111561372257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561374c576020820181803683370190505b5090505b84156137c557613761600183614054565b915061376e600a866140ed565b613779906030614009565b60f81b81838151811061379c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506137be600a86614021565b9450613750565b949350505050565b6007546137e59030906001600160a01b031684612e49565b600754604051637c8d9fb960e11b8152306004820152602481018490526000604482018190526064820181905260848201524260a48201526001600160a01b039091169063f91b3f7290839060c4016060604051808303818588803b15801561384d57600080fd5b505af1158015613861573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906114c89190613b92565b600082601f830112613896578081fd5b81356138a96138a482613fe1565b613fb0565b8181528460208386010111156138bd578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156138e8578081fd5b813561214b81614143565b600060208284031215613904578081fd5b815161214b81614143565b60008060408385031215613921578081fd5b823561392c81614143565b9150602083013561393c81614143565b809150509250929050565b60008060006060848603121561395b578081fd5b833561396681614143565b9250602084013561397681614143565b929592945050506040919091013590565b60008060408385031215613999578182fd5b82356139a481614143565b9150602083013561393c81614158565b600080604083850312156139c6578182fd5b82356139d181614143565b9150602083013567ffffffffffffffff8111156139ec578182fd5b6139f885828601613886565b9150509250929050565b60008060408385031215613a14578182fd5b8235613a1f81614143565b946020939093013593505050565b600060208284031215613a3e578081fd5b813561214b81614158565b600060208284031215613a5a578081fd5b815161214b81614158565b600060208284031215613a76578081fd5b813567ffffffffffffffff811115613a8c578182fd5b6137c584828501613886565b600060208284031215613aa9578081fd5b815167ffffffffffffffff811115613abf578182fd5b8201601f81018413613acf578182fd5b8051613add6138a482613fe1565b818152856020838501011115613af1578384fd5b613b0282602083016020860161406b565b95945050505050565b60008060408385031215613b1d578182fd5b823567ffffffffffffffff80821115613b34578384fd5b613b4086838701613886565b93506020850135915080821115613b55578283fd5b506139f885828601613886565b600060208284031215613b73578081fd5b5035919050565b600060208284031215613b8b578081fd5b5051919050565b600080600060608486031215613ba6578081fd5b8351925060208401519150604084015190509250925092565b60008151808452613bd781602086016020860161406b565b601f01601f19169290920160200192915050565b60008351613bfd81846020880161406b565b835190830190613c1181836020880161406b565b01949350505050565b65425241494e2d60d01b815260008351613c3b81600685016020880161406b565b835190830190613c5281600684016020880161406b565b01600601949350505050565b6001600160a01b03848116825283166020820152606060408201819052600090613b0290830184613bbf565b6001600160a01b03831681526040602082018190526000906137c590830184613bbf565b6001600160a01b0384168152606060208201819052600090613cd290830185613bbf565b8281036040840152613ce48185613bbf565b9695505050505050565b60208152600061214b6020830184613bbf565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252600d908201526c2727902727a2229027aba722a960991b604082015260600190565b60208082526014908201527353454e4445522043414e2754204245205a45524f60601b604082015260600190565b6020808252602e908201527f435348543a20596f7520646f6e2774206861766520656e6f756768207265776160408201526d1c99081d1bc818d85cda081bdd5d60921b606082015260800190565b6020808252601f908201527f4d414e494120435348543a20426c61636b6c6973746564206164647265737300604082015260600190565b60208082526038908201527f4d414e494120435348543a20667574757220616e642072657761726473506f6f60408201527f6c2063616e6e6f7420636173686f757420726577617264730000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602b908201527f4d414e494120435348543a20206372656174696f6e2066726f6d20746865207a60408201526a65726f206164647265737360a81b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015613f8f5784516001600160a01b031683529383019391830191600101613f6a565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613fd957613fd961412d565b604052919050565b600067ffffffffffffffff821115613ffb57613ffb61412d565b50601f01601f191660200190565b6000821982111561401c5761401c614101565b500190565b60008261403057614030614117565b500490565b600081600019048311821515161561404f5761404f614101565b500290565b60008282101561406657614066614101565b500390565b60005b8381101561408657818101518382015260200161406e565b838111156118165750506000910152565b600181811c908216806140ab57607f821691505b602082108114156140cc57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156140e6576140e6614101565b5060010190565b6000826140fc576140fc614117565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612cb457600080fd5b8015158114612cb457600080fdfe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220ae556a25e95d17d9e3bb198e5b942a2b63be156e45c74aa6fb4688932d9ad49364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061046a5760003560e01c80637e8100c01161024c578063b62496f511610146578063da41b333116100c3578063f5a0725611610087578063f5a0725614610998578063f74c9934146109a0578063f7b9f943146109b3578063f9afc763146109bb578063fb0a7494146109c357600080fd5b8063da41b33314610934578063db3ad6b51461093c578063dd62ed3e14610944578063ee1afdbf1461097d578063f2fde38b1461098557600080fd5b8063c5ca7d6d1161010a578063c5ca7d6d146108d5578063cf382877146108e8578063d0c298b3146108fb578063d0f774741461090e578063d89293421461092157600080fd5b8063b62496f514610871578063b96392c114610894578063bbc7d0b9146108a7578063bdf24a53146108ba578063c04b4637146108c257600080fd5b8063938bc811116101d4578063a0a8fe6511610198578063a0a8fe6514610828578063a457c2d714610830578063a5021a1714610843578063a9059cbb1461084b578063aa5f7e261461085e57600080fd5b8063938bc811146107d457806395d89b41146107e75780639a7a23d6146107ef5780639b87682a146108025780639c82751c1461081557600080fd5b806388c41d7c1161021b57806388c41d7c146107775780638bc9c7b01461078a5780638da5cb5b1461079d5780638f0ba4ca146107ae5780639349c47d146107c157600080fd5b80637e8100c0146107405780638013858b1461074957806385141a771461075c5780638743ef6d1461076f57600080fd5b806342bc9fca116103685780635f1c3182116102e55780636f4a2cd0116102a95780636f4a2cd0146106c657806370a08231146106e9578063715018a6146107125780637628b3d71461071a5780637b7703921461072d57600080fd5b80635f1c31821461067b57806365bfe430146106845780636612e66f146106975780636770474b146106aa5780636b67c4df146106bd57600080fd5b806354f12f1f1161032c57806354f12f1f14610631578063583bd7a61461063a57806359640ed91461064d5780635a63ddbb146106605780635b0d46741461067357600080fd5b806342bc9fca146105e857806348df5829146105fb57806348e5642b1461060e57806349bd5a5e14610616578063545579731461062957600080fd5b806318160ddd116103f65780632bb14e1d116103ba5780632bb14e1d14610597578063313ce567146105a05780633655af8c146105af57806339509351146105c25780634195fbf3146105d557600080fd5b806318160ddd1461053d5780631cdd3be3146105455780631d933a4a1461056857806323b872dd1461057b5780632b14ca561461058e57600080fd5b806309a69f571161043d57806309a69f57146104d85780630ab38aa3146104ee57806313114a9d14610501578063138a634a1461050a5780631694505e1461051257600080fd5b8063016cffb21461046f57806306fdde0314610484578063084a6bff146104a2578063095ea7b3146104b5575b600080fd5b61048261047d3660046138d7565b6109d6565b005b61048c610a2b565b6040516104999190613cee565b60405180910390f35b6104826104b0366004613b62565b610abd565b6104c86104c3366004613a02565b610b13565b6040519015158152602001610499565b6104e0610b2b565b604051908152602001610499565b6104826104fc3660046138d7565b610c7d565b6104e060125481565b61048c610cc9565b600754610525906001600160a01b031681565b6040516001600160a01b039091168152602001610499565b6002546104e0565b6104c86105533660046138d7565b60196020526000908152604090205460ff1681565b610482610576366004613b62565b610e1b565b6104c8610589366004613947565b610e4a565b6104e060135481565b6104e0600f5481565b60405160128152602001610499565b6104826105bd366004613b62565b610e8f565b6104c86105d0366004613a02565b61109d565b6104826105e3366004613b62565b6110d7565b6104826105f6366004613b62565b61114a565b600c54610525906001600160a01b031681565b6104e0611193565b600854610525906001600160a01b031681565b6104826111d8565b6104e060105481565b610482610648366004613a2d565b6113ff565b61048261065b366004613b62565b611443565b600954610525906001600160a01b031681565b61048c6114cf565b6104e060175481565b610482610692366004613b62565b6115aa565b6104826106a5366004613987565b61181c565b6104826106b8366004613b62565b611871565b6104e060145481565b6106ce6118a0565b60408051938452602084019290925290820152606001610499565b6104e06106f73660046138d7565b6001600160a01b031660009081526020819052604090205490565b610482611979565b600654610525906001600160a01b031681565b61048261073b366004613b62565b6119af565b6104e060115481565b610482610757366004613b62565b611a0a565b600e54610525906001600160a01b031681565b610482611a65565b610482610785366004613b62565b611aed565b610482610798366004613b62565b611b41565b6005546001600160a01b0316610525565b6104826107bc366004613a65565b611b70565b6104826107cf3660046138d7565b612078565b6104c86107e23660046139b4565b6120c4565b61048c612152565b6104826107fd366004613987565b612161565b610482610810366004613b0b565b61222c565b610482610823366004613b62565b612397565b6104e06123f2565b6104c861083e366004613a02565b612437565b6104e06124d4565b6104c8610859366004613a02565b612519565b61048261086c366004613b62565b61252f565b6104c861087f3660046138d7565b601a6020526000908152604090205460ff1681565b6104e06108a23660046138d7565b6127e5565b600b54610525906001600160a01b031681565b61048c612896565b600d54610525906001600160a01b031681565b600a54610525906001600160a01b031681565b6104826108f6366004613b62565b612971565b6104826109093660046138d7565b6129ba565b61048261091c366004613a2d565b612a06565b61048261092f366004613987565b612a62565b6104e0612ab7565b6104e0612afc565b6104e061095236600461390f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61048c612b41565b6104826109933660046138d7565b612c1c565b6104e0612cb7565b6104e06109ae3660046138d7565b612cfc565b6104e0612d2f565b6104c8612d74565b6104826109d13660046138d7565b612df1565b6005546001600160a01b03163314610a095760405162461bcd60e51b8152600401610a0090613e7b565b60405180910390fd5b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b606060038054610a3a90614097565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6690614097565b8015610ab35780601f10610a8857610100808354040283529160200191610ab3565b820191906000526020600020905b815481529060010190602001808311610a9657829003601f168201915b5050505050905090565b6005546001600160a01b03163314610ae75760405162461bcd60e51b8152600401610a0090613e7b565b600f819055601454601154601054610b0d9291610b079182908690612e3d565b90612e3d565b60125550565b600033610b21818585612e49565b5060019392505050565b600033610b4a5760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd39190613a49565b610bef5760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b031663619a635e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190613b7a565b905090565b6005546001600160a01b03163314610ca75760405162461bcd60e51b8152600401610a0090613e7b565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b606033610ce85760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610d3957600080fd5b505afa158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d719190613a49565b610d8d5760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b031663334de3a2335b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160006040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c789190810190613a98565b6005546001600160a01b03163314610e455760405162461bcd60e51b8152600401610a0090613e7b565b601355565b6000610e57848484612f6d565b610b218433610e8a8560405180606001604052806028815260200161416760289139610e838a33610952565b91906131a7565b612e49565b3381610ed45760405162461bcd60e51b8152602060048201526014602482015273416d6f756e742063616e2774206265207a65726f60601b6044820152606401610a00565b6001600160a01b038116610efa5760405162461bcd60e51b8152600401610a0090613ef5565b6001600160a01b03811660009081526019602052604090205460ff1615610f335760405162461bcd60e51b8152600401610a0090613de7565b6009546001600160a01b03828116911614801590610f5f5750600a546001600160a01b03828116911614155b610f7b5760405162461bcd60e51b8152600401610a0090613e1e565b6006546040516330cd31af60e11b81526001600160a01b038381166004830152600092169063619a635e9060240160206040518083038186803b158015610fc157600080fd5b505afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff99190613b7a565b90508281101561101b5760405162461bcd60e51b8152600401610a0090613d99565b600a54611032906001600160a01b031683856131d3565b600654604051636a8968a760e01b81526001600160a01b0384811660048301526024820186905290911690636a8968a790604401600060405180830381600087803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b50505050505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610b219082908690610e8a908790614009565b6005546001600160a01b031633146111015760405162461bcd60e51b8152600401610a0090613e7b565b4781111561110c5750475b6005546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611146573d6000803e3d6000fd5b5050565b6005546001600160a01b031633146111745760405162461bcd60e51b8152600401610a0090613e7b565b6010819055601454601154600f54610b0d9291610b0791829086612e3d565b600654604080516345193f5560e11b815290516000926001600160a01b031691638a327eaa916004808301926020929190829003018186803b158015610c4057600080fd5b33806111f65760405162461bcd60e51b8152600401610a0090613ef5565b6001600160a01b03811660009081526019602052604090205460ff161561122f5760405162461bcd60e51b8152600401610a0090613de7565b6009546001600160a01b0382811691161480159061125b5750600a546001600160a01b03828116911614155b6112775760405162461bcd60e51b8152600401610a0090613e1e565b6006546040516330cd31af60e11b81526001600160a01b038381166004830152600092169063619a635e9060240160206040518083038186803b1580156112bd57600080fd5b505afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f59190613b7a565b9050600081116113645760405162461bcd60e51b815260206004820152603460248201527f4d414e494120435348543a20596f7520646f6e2774206861766520656e6f75676044820152731a081c995dd85c99081d1bc818d85cda081bdd5d60621b6064820152608401610a00565b600a5461137b906001600160a01b031683836131d3565b60065460405163170a62c760e21b81526001600160a01b03848116600483015290911690635c298b1c90602401602060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa9190613b7a565b505050565b6005546001600160a01b031633146114295760405162461bcd60e51b8152600401610a0090613e7b565b601680549115156101000261ff0019909216919091179055565b6005546001600160a01b0316331461146d5760405162461bcd60e51b8152600401610a0090613e7b565b600654604051631df3773160e31b8152600481018390526001600160a01b039091169063ef9bb988906024015b600060405180830381600087803b1580156114b457600080fd5b505af11580156114c8573d6000803e3d6000fd5b5050505050565b6060336114ee5760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561153f57600080fd5b505afa158015611553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115779190613a49565b6115935760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b0316634a389fae33610da0565b33806116065760405162461bcd60e51b815260206004820152602560248201527f435348543a20206372656174696f6e2066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a00565b6001600160a01b03811660009081526019602052604090205460ff161561163f5760405162461bcd60e51b8152600401610a0090613de7565b6009546001600160a01b0382811691161480159061166b5750600a546001600160a01b03828116911614155b6116d25760405162461bcd60e51b815260206004820152603260248201527f435348543a20667574757220616e642072657761726473506f6f6c2063616e6e6044820152716f7420636173686f7574207265776172647360701b6064820152608401610a00565b6006546040516329b8573160e21b81526001600160a01b03838116600483015260248201859052600092169063a6e15cc49060440160206040518083038186803b15801561171f57600080fd5b505afa158015611733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117579190613b7a565b9050600081116117795760405162461bcd60e51b8152600401610a0090613d99565b600a54611790906001600160a01b031683836131d3565b60065460405163376db80160e11b81526001600160a01b0384811660048301526024820186905290911690636edb700290604401602060405180830381600087803b1580156117de57600080fd5b505af11580156117f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118169190613b7a565b50505050565b6005546001600160a01b031633146118465760405162461bcd60e51b8152600401610a0090613e7b565b6001600160a01b03919091166000908152601b60205260409020805460ff1916911515919091179055565b6005546001600160a01b0316331461189b5760405162461bcd60e51b8152600401610a0090613e7b565b601755565b60008080336001600160a01b03166118c06005546001600160a01b031690565b6001600160a01b0316146118e65760405162461bcd60e51b8152600401610a0090613e7b565b600660009054906101000a90046001600160a01b03166001600160a01b03166388fe65536040518163ffffffff1660e01b8152600401606060405180830381600087803b15801561193657600080fd5b505af115801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e9190613b92565b925092509250909192565b6005546001600160a01b031633146119a35760405162461bcd60e51b8152600401610a0090613e7b565b6119ad6000613327565b565b6005546001600160a01b031633146119d95760405162461bcd60e51b8152600401610a0090613e7b565b6006546040516318df5db960e31b8152600481018390526001600160a01b039091169063c6faedc89060240161149a565b6005546001600160a01b03163314611a345760405162461bcd60e51b8152600401610a0090613e7b565b60065460405163cece91eb60e01b8152600481018390526001600160a01b039091169063cece91eb9060240161149a565b600660009054906101000a90046001600160a01b03166001600160a01b03166388fe65536040518163ffffffff1660e01b8152600401606060405180830381600087803b158015611ab557600080fd5b505af1158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa9190613b92565b6005546001600160a01b03163314611b175760405162461bcd60e51b8152600401610a0090613e7b565b80601181905550610b0d601454610b07601154610b07601054600f54612e3d90919063ffffffff16565b6005546001600160a01b03163314611b6b5760405162461bcd60e51b8152600401610a0090613e7b565b601555565b60038151118015611b82575060208151105b611bce5760405162461bcd60e51b815260206004820181905260248201527f4e4f4445204352454154494f4e3a204e414d452053495a4520494e56414c49446044820152606401610a00565b3380611c335760405162461bcd60e51b815260206004820152602e60248201527f4e4f4445204352454154494f4e3a20206372656174696f6e2066726f6d20746860448201526d65207a65726f206164647265737360901b6064820152608401610a00565b6001600160a01b03811660009081526019602052604090205460ff1615611ca75760405162461bcd60e51b815260206004820152602260248201527f4e4f4445204352454154494f4e3a20426c61636b6c6973746564206164647265604482015261737360f01b6064820152608401610a00565b6009546001600160a01b03828116911614801590611cd35750600a546001600160a01b03828116911614155b611d455760405162461bcd60e51b815260206004820152603760248201527f4e4f4445204352454154494f4e3a20667574757220616e64207265776172647360448201527f506f6f6c2063616e6e6f7420637265617465206e6f64650000000000000000006064820152608401610a00565b60065460408051631e3fd85760e31b815290516000926001600160a01b03169163f1fec2b8916004808301926020929190829003018186803b158015611d8a57600080fd5b505afa158015611d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc29190613b7a565b905080611de4836001600160a01b031660009081526020819052604090205490565b1015611e475760405162461bcd60e51b815260206004820152602c60248201527f4e4f4445204352454154494f4e3a2042616c616e636520746f6f206c6f77206660448201526b37b91031b932b0ba34b7b71760a11b6064820152608401610a00565b3060009081526020819052604090205460175481108015908190611e725750601654610100900460ff165b8015611e81575060165460ff16155b8015611e9b57506005546001600160a01b03858116911614155b8015611ec057506001600160a01b0384166000908152601a602052604090205460ff16155b15612002576016805460ff19166001179055601154600090611ef090606490611eea908690613379565b90613385565b600954909150611f09906001600160a01b031682613391565b6000611f256064611eea600f548761337990919063ffffffff16565b90506000611f436064611eea6015548561337990919063ffffffff16565b600a54909150611f5c906001600160a01b031682613391565b600a54611f7d9030906001600160a01b0316611f7885856133e0565b6131d3565b6000611f996064611eea6010548961337990919063ffffffff16565b9050611fa4816133ec565b6000611fc06064611eea6014548a61337990919063ffffffff16565b600b54909150611fd9906001600160a01b031682613391565b30600090815260208190526040902054611ff290613473565b50506016805460ff191690555050505b61200d8430856131d3565b6006546040516312b8603f60e01b81526001600160a01b03909116906312b8603f9061203f9087908990600401613c8a565b600060405180830381600087803b15801561205957600080fd5b505af115801561206d573d6000803e3d6000fd5b505050505050505050565b6005546001600160a01b031633146120a25760405162461bcd60e51b8152600401610a0090613e7b565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60065460405163fe58340b60e01b81526000916001600160a01b03169063fe58340b906120f990339087908790600401613c5e565b602060405180830381600087803b15801561211357600080fd5b505af1158015612127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214b9190613a49565b9392505050565b606060048054610a3a90614097565b6005546001600160a01b0316331461218b5760405162461bcd60e51b8152600401610a0090613e7b565b6008546001600160a01b03838116911614156122225760405162461bcd60e51b815260206004820152604a60248201527f544b4e3a205468652050616e63616b655377617020706169722063616e6e6f7460448201527f2062652072656d6f7665642066726f6d206175746f6d617465644d61726b65746064820152694d616b6572506169727360b01b608482015260a401610a00565b61114682826135c2565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561227d57600080fd5b505afa158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b59190613a49565b6122d15760405162461bcd60e51b8152600401610a0090613d44565b600381511180156122e3575060208151105b61232f5760405162461bcd60e51b815260206004820152601e60248201527f4e4f44452052454e414d453a204e414d452053495a4520494e56414c494400006044820152606401610a00565b6006546001600160a01b0316635f3dc7043384846040518463ffffffff1660e01b815260040161236193929190613cae565b600060405180830381600087803b15801561237b57600080fd5b505af115801561238f573d6000803e3d6000fd5b505050505050565b6005546001600160a01b031633146123c15760405162461bcd60e51b8152600401610a0090613e7b565b60065460405163d1871a8960e01b8152600481018390526001600160a01b039091169063d1871a899060240161149a565b6006546040805163b8527aef60e01b815290516000926001600160a01b03169163b8527aef916004808301926020929190829003018186803b158015610c4057600080fd5b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156124bc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a00565b6124c98286868403612e49565b506001949350505050565b60065460408051631e3fd85760e31b815290516000926001600160a01b03169163f1fec2b8916004808301926020929190829003018186803b158015610c4057600080fd5b6000612526338484612f6d565b50600192915050565b6000811161257f5760405162461bcd60e51b815260206004820152601a60248201527f434d50443a20416d6f756e742063616e2774206265207a65726f0000000000006044820152606401610a00565b60065460408051631e3fd85760e31b815290516000926001600160a01b03169163f1fec2b8916004808301926020929190829003018186803b1580156125c457600080fd5b505afa1580156125d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fc9190613b7a565b905061260881836140ed565b1561266f5760405162461bcd60e51b815260206004820152603160248201527f434d50443a20416d6f756e74206d7573742062652061206d756c7469706c65206044820152706f6620746865206e6f646520707269636560781b6064820152608401610a00565b600061267b8284614021565b905060006060803361268b6111d8565b86612695336106f7565b10156126e35760405162461bcd60e51b815260206004820152601b60248201527f434d50443a2042616c616e6365206973206e6f7420656e6f75676800000000006044820152606401610a00565b6126ec426136ab565b60065460405163112469f960e21b81526001600160a01b038481166004830152612770921690634491a7e49060240160206040518083038186803b15801561273357600080fd5b505afa158015612747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276b9190613b7a565b6136ab565b604051602001612781929190613c1a565b6040516020818303038152906040529150600193505b84841161109457816127a8856136ab565b6040516020016127b9929190613beb565b60405160208183030381529060405292506127d383611b70565b836127dd816140d2565b945050612797565b6005546000906001600160a01b031633146128125760405162461bcd60e51b8152600401610a0090613e7b565b6006546040516330cd31af60e11b81526001600160a01b0384811660048301529091169063619a635e906024015b60206040518083038186803b15801561285857600080fd5b505afa15801561286c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128909190613b7a565b92915050565b6060336128b55760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561290657600080fd5b505afa15801561291a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293e9190613a49565b61295a5760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b031663c92819ce33610da0565b6005546001600160a01b0316331461299b5760405162461bcd60e51b8152600401610a0090613e7b565b6014819055601154601054600f54610b0d928492610b07928391612e3d565b6005546001600160a01b031633146129e45760405162461bcd60e51b8152600401610a0090613e7b565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314612a305760405162461bcd60e51b8152600401610a0090613e7b565b600654604051636d58441560e11b815282151560048201526001600160a01b039091169063dab0882a9060240161149a565b6005546001600160a01b03163314612a8c5760405162461bcd60e51b8152600401610a0090613e7b565b6001600160a01b03919091166000908152601960205260409020805460ff1916911515919091179055565b6006546040805163fb10d6fb60e01b815290516000926001600160a01b03169163fb10d6fb916004808301926020929190829003018186803b158015610c4057600080fd5b6006546040805163613ff46f60e01b815290516000926001600160a01b03169163613ff46f916004808301926020929190829003018186803b158015610c4057600080fd5b606033612b605760405162461bcd60e51b8152600401610a0090613d6b565b6006546001600160a01b03166341ac82b0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015612bb157600080fd5b505afa158015612bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be99190613a49565b612c055760405162461bcd60e51b8152600401610a0090613d44565b6006546001600160a01b0316635759fb0233610da0565b6005546001600160a01b03163314612c465760405162461bcd60e51b8152600401610a0090613e7b565b6001600160a01b038116612cab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a00565b612cb481613327565b50565b600654604080516327b3bf1160e01b815290516000926001600160a01b0316916327b3bf11916004808301926020929190829003018186803b158015610c4057600080fd5b60065460405163112469f960e21b81526001600160a01b0383811660048301526000921690634491a7e490602401612840565b60065460408051636f60a39360e11b815290516000926001600160a01b03169163dec14726916004808301926020929190829003018186803b158015610c4057600080fd5b600654604080516385c44d9d60e01b815290516000926001600160a01b0316916385c44d9d916004808301926020929190829003018186803b158015612db957600080fd5b505afa158015612dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190613a49565b6005546001600160a01b03163314612e1b5760405162461bcd60e51b8152600401610a0090613e7b565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600061214b8284614009565b6001600160a01b038316612eab5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a00565b6001600160a01b038216612f0c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a00565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316612f935760405162461bcd60e51b8152600401610a0090613eb0565b6001600160a01b038216612fb95760405162461bcd60e51b8152600401610a0090613d01565b6001600160a01b03831660009081526019602052604090205460ff16158015612ffb57506001600160a01b03821660009081526019602052604090205460ff16155b61303d5760405162461bcd60e51b8152602060048201526013602482015272426c61636b6c6973746564206164647265737360681b6044820152606401610a00565b6001600160a01b0383166000908152601b6020526040812054819060ff1615801561308c57506007546001600160a01b038581169116148061308c57506008546001600160a01b038581169116145b156131775760065460405163041ac82b60e41b81526001600160a01b038781166004830152909116906341ac82b09060240160206040518083038186803b1580156130d657600080fd5b505afa1580156130ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310e9190613a49565b61315a5760405162461bcd60e51b815260206004820152601a60248201527f437265617465206174206c65617374206f6e6520427261696e210000000000006044820152606401610a00565b6131746064611eea6013548661337990919063ffffffff16565b91505b61318183836133e0565b600d5490915061319c9086906001600160a01b0316846131d3565b6114c88585836131d3565b600081848411156131cb5760405162461bcd60e51b8152600401610a009190613cee565b505050900390565b6001600160a01b0383166131f95760405162461bcd60e51b8152600401610a0090613eb0565b6001600160a01b03821661321f5760405162461bcd60e51b8152600401610a0090613d01565b6001600160a01b038316600090815260208190526040902054818110156132975760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a00565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906132ce908490614009565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161331a91815260200190565b60405180910390a3611816565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061214b8284614035565b600061214b8284614021565b4761339b82613473565b60006133a747836133e0565b6040519091506001600160a01b0385169082156108fc029083906000818181858888f193505050501580156114c8573d6000803e3d6000fd5b600061214b8284614054565b60006133f9826002613385565b9050600061340783836133e0565b90504761341383613473565b600061341f47836133e0565b905061342b83826137cd565b60408051858152602081018390529081018490527f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619060600160405180910390a15050505050565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106134b657634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201810191909152600754604080516339d94ae160e11b8152905191909316926373b295c2926004808301939192829003018186803b15801561350a57600080fd5b505afa15801561351e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354291906138f3565b8160018151811061356357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526007546135899130911684612e49565b600754604051633b158ab160e11b81526001600160a01b039091169063762b156290612361908590600090869030904290600401613f40565b6001600160a01b0382166000908152601a602052604090205460ff16151581151514156136575760405162461bcd60e51b815260206004820152603d60248201527f544b4e3a204175746f6d61746564206d61726b6574206d616b6572207061697260448201527f20697320616c72656164792073657420746f20746861742076616c75650000006064820152608401610a00565b6001600160a01b0382166000818152601a6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6060816136cf5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156136f957806136e3816140d2565b91506136f29050600a83614021565b91506136d3565b60008167ffffffffffffffff81111561372257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561374c576020820181803683370190505b5090505b84156137c557613761600183614054565b915061376e600a866140ed565b613779906030614009565b60f81b81838151811061379c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506137be600a86614021565b9450613750565b949350505050565b6007546137e59030906001600160a01b031684612e49565b600754604051637c8d9fb960e11b8152306004820152602481018490526000604482018190526064820181905260848201524260a48201526001600160a01b039091169063f91b3f7290839060c4016060604051808303818588803b15801561384d57600080fd5b505af1158015613861573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906114c89190613b92565b600082601f830112613896578081fd5b81356138a96138a482613fe1565b613fb0565b8181528460208386010111156138bd578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156138e8578081fd5b813561214b81614143565b600060208284031215613904578081fd5b815161214b81614143565b60008060408385031215613921578081fd5b823561392c81614143565b9150602083013561393c81614143565b809150509250929050565b60008060006060848603121561395b578081fd5b833561396681614143565b9250602084013561397681614143565b929592945050506040919091013590565b60008060408385031215613999578182fd5b82356139a481614143565b9150602083013561393c81614158565b600080604083850312156139c6578182fd5b82356139d181614143565b9150602083013567ffffffffffffffff8111156139ec578182fd5b6139f885828601613886565b9150509250929050565b60008060408385031215613a14578182fd5b8235613a1f81614143565b946020939093013593505050565b600060208284031215613a3e578081fd5b813561214b81614158565b600060208284031215613a5a578081fd5b815161214b81614158565b600060208284031215613a76578081fd5b813567ffffffffffffffff811115613a8c578182fd5b6137c584828501613886565b600060208284031215613aa9578081fd5b815167ffffffffffffffff811115613abf578182fd5b8201601f81018413613acf578182fd5b8051613add6138a482613fe1565b818152856020838501011115613af1578384fd5b613b0282602083016020860161406b565b95945050505050565b60008060408385031215613b1d578182fd5b823567ffffffffffffffff80821115613b34578384fd5b613b4086838701613886565b93506020850135915080821115613b55578283fd5b506139f885828601613886565b600060208284031215613b73578081fd5b5035919050565b600060208284031215613b8b578081fd5b5051919050565b600080600060608486031215613ba6578081fd5b8351925060208401519150604084015190509250925092565b60008151808452613bd781602086016020860161406b565b601f01601f19169290920160200192915050565b60008351613bfd81846020880161406b565b835190830190613c1181836020880161406b565b01949350505050565b65425241494e2d60d01b815260008351613c3b81600685016020880161406b565b835190830190613c5281600684016020880161406b565b01600601949350505050565b6001600160a01b03848116825283166020820152606060408201819052600090613b0290830184613bbf565b6001600160a01b03831681526040602082018190526000906137c590830184613bbf565b6001600160a01b0384168152606060208201819052600090613cd290830185613bbf565b8281036040840152613ce48185613bbf565b9695505050505050565b60208152600061214b6020830184613bbf565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252600d908201526c2727902727a2229027aba722a960991b604082015260600190565b60208082526014908201527353454e4445522043414e2754204245205a45524f60601b604082015260600190565b6020808252602e908201527f435348543a20596f7520646f6e2774206861766520656e6f756768207265776160408201526d1c99081d1bc818d85cda081bdd5d60921b606082015260800190565b6020808252601f908201527f4d414e494120435348543a20426c61636b6c6973746564206164647265737300604082015260600190565b60208082526038908201527f4d414e494120435348543a20667574757220616e642072657761726473506f6f60408201527f6c2063616e6e6f7420636173686f757420726577617264730000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602b908201527f4d414e494120435348543a20206372656174696f6e2066726f6d20746865207a60408201526a65726f206164647265737360a81b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015613f8f5784516001600160a01b031683529383019391830191600101613f6a565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613fd957613fd961412d565b604052919050565b600067ffffffffffffffff821115613ffb57613ffb61412d565b50601f01601f191660200190565b6000821982111561401c5761401c614101565b500190565b60008261403057614030614117565b500490565b600081600019048311821515161561404f5761404f614101565b500290565b60008282101561406657614066614101565b500390565b60005b8381101561408657818101518382015260200161406e565b838111156118165750506000910152565b600181811c908216806140ab57607f821691505b602082108114156140cc57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156140e6576140e6614101565b5060010190565b6000826140fc576140fc614117565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612cb457600080fd5b8015158114612cb457600080fdfe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220ae556a25e95d17d9e3bb198e5b942a2b63be156e45c74aa6fb4688932d9ad49364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 120,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 126,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 128,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1916,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "nodeRewardManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(NodeRewardController)5773"
      },
      {
        "astId": 1919,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IJoeRouter02)6242"
      },
      {
        "astId": 1921,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1923,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "expensePool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1925,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "distributionPool",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1927,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "marketingPool",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1929,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "treasuryPool",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 1931,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "cashoutPool",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 1934,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "deadWallet",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 1936,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "rewardsFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1938,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "liquidityPoolFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1940,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "expenseFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 1942,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "totalFees",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 1944,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "sellFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 1946,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "marketingFee",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 1948,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "rwSwap",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 1951,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "swapping",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 1954,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "swapLiquify",
        "offset": 1,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 1961,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "swapTokensAmount",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 1971,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "TOTAL_SUPPLY",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 1975,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "_isBlacklisted",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1979,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "automatedMarketMakerPairs",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1983,
        "contract": "contracts/EasyToken.sol:EasyToken",
        "label": "_isExcludedFromFee",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IJoeRouter02)6242": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(NodeRewardController)5773": {
        "encoding": "inplace",
        "label": "contract NodeRewardController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}